{"version":3,"sources":["webpack:///./node_modules/_ol@5.3.1@ol/style/Style.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Fill.js","webpack:///./node_modules/_ol@5.3.1@ol/format/FormatType.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Circle.js","webpack:///./node_modules/_ol@5.3.1@ol/style/RegularShape.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Image.js","webpack:///./node_modules/_ol@5.3.1@ol/Feature.js","webpack:///./node_modules/_ol@5.3.1@ol/featureloader.js","webpack:///./node_modules/_ol@5.3.1@ol/loadingstrategy.js","webpack:///./node_modules/_ol@5.3.1@ol/source/VectorEventType.js","webpack:///./node_modules/_ol@5.3.1@ol/structs/RBush.js","webpack:///./node_modules/_ol@5.3.1@ol/source/Vector.js","webpack:///./node_modules/_ol@5.3.1@ol/layer/Vector.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Stroke.js"],"names":["__webpack_require__","d","__webpack_exports__","toFunction","createDefaultStyle","createEditingStyle","_asserts_js__WEBPACK_IMPORTED_MODULE_0__","_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__","_Circle_js__WEBPACK_IMPORTED_MODULE_2__","_Fill_js__WEBPACK_IMPORTED_MODULE_3__","_Stroke_js__WEBPACK_IMPORTED_MODULE_4__","Style","opt_options","options","this","geometry_","geometryFunction_","defaultGeometryFunction","undefined","geometry","setGeometry","fill_","fill","image_","image","renderer_","renderer","stroke_","stroke","text_","text","zIndex_","zIndex","obj","styleFunction","styles","Array","isArray","Object","getZIndex","style","prototype","clone","getGeometry","getFill","getImage","getStroke","getText","getRenderer","setRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","defaultStyles","resolution","color","width","radius","white","blue","POLYGON","MULTI_POLYGON","LINE_STRING","MULTI_LINE_STRING","CIRCLE","concat","POINT","Infinity","MULTI_POINT","GEOMETRY_COLLECTION","_util_js__WEBPACK_IMPORTED_MODULE_0__","_color_js__WEBPACK_IMPORTED_MODULE_1__","Fill","color_","checksum_","getColor","slice","setColor","getChecksum","ARRAY_BUFFER","JSON","TEXT","XML","_RegularShape_js__WEBPACK_IMPORTED_MODULE_0__","CircleStyle","RegularShape","call","points","atlasManager","__proto__","create","constructor","getRadius","atlasManager_","setOpacity","getOpacity","setScale","getScale","setRadius","radius_","render_","_color_js__WEBPACK_IMPORTED_MODULE_0__","_colorlike_js__WEBPACK_IMPORTED_MODULE_1__","_dom_js__WEBPACK_IMPORTED_MODULE_2__","_has_js__WEBPACK_IMPORTED_MODULE_3__","_ImageState_js__WEBPACK_IMPORTED_MODULE_4__","_render_canvas_js__WEBPACK_IMPORTED_MODULE_5__","_Image_js__WEBPACK_IMPORTED_MODULE_6__","ImageStyle","rotateWithView","opacity","rotation","scale","checksums_","canvas_","hitDetectionCanvas_","origin_","points_","radius1","radius2_","radius2","angle_","angle","anchor_","size_","imageSize_","hitDetectionImageSize_","getPoints","getRadius2","getAngle","getRotation","getRotateWithView","getAnchor","getHitDetectionImage","pixelRatio","getImageSize","getHitDetectionImageSize","getImageState","LOADED","getOrigin","getSize","listenImageChange","listener","thisArg","load","unlistenImageChange","imageSize","strokeStyle","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","strokeWidth","getWidth","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","size","renderOptions","context","canvas","draw_","createHitDetectionCanvas_","Math","round","renderHitDetectionCallback","hasCustomHitDetectionImage","drawHitDetectionCanvas_","bind","id","info","add","offsetX","offsetY","hitImage","height","x","y","i","angle0","radiusC","setTransform","translate","beginPath","arc","PI","lineTo","cos","sin","fillStyle","lineWidth","setLineDash","closePath","strokeChecksum","fillChecksum","recalculate","checksum","toString","opacity_","rotateWithView_","rotation_","scale_","getSnapToPixel","setRotateWithView","setRotation","setSnapToPixel","snapToPixel","_events_js__WEBPACK_IMPORTED_MODULE_1__","_events_EventType_js__WEBPACK_IMPORTED_MODULE_2__","_Object_js__WEBPACK_IMPORTED_MODULE_3__","Feature","BaseObject","opt_geometryOrProperties","id_","geometryName_","style_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","getSimplifiedGeometry","properties","setProperties","getProperties","setGeometryName","getGeometryName","getStyle","setStyle","getId","getStyleFunction","handleGeometryChange_","changed","CHANGE","set","createStyleFunction","setId","name","loadFeaturesXhr","url","format","success","failure","extent","projection","xhr","XMLHttpRequest","open","getType","FormatType","responseType","onload","event","status","source","type","responseText","responseXML","DOMParser","parseFromString","readFeatures","featureProjection","readProjection","getLastExtent","onerror","send","featureloader_xhr","features","dataProjection","sourceOrTile","addFeatures","functions","loadingstrategy_all","VectorEventType","ADDFEATURE","CHANGEFEATURE","CLEAR","REMOVEFEATURE","RBush_RBush","opt_maxEntries","rbush_","_rbush_2_0_2_rbush_default","items_","insert","value","item","minX","minY","maxX","maxY","util","extents","values","items","length","l","remove","uid","update","bbox","_ol_5_3_1_ol_extent","getAll","all","map","getInExtent","search","forEach","callback","opt_this","forEach_","forEachInExtent","result","isEmpty","_ol_5_3_1_ol_obj","clear","getExtent","opt_extent","data","toJSON","rbush","structs_RBush","VectorSourceEvent","Event","opt_feature","Vector_VectorSource","Source","VectorSource","attributions","state","State","READY","wrapX","loader_","format_","overlaps_","overlaps","url_","loader","asserts","strategy_","strategy","collection","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","nullGeometryFeatures_","idIndex_","undefIdIndex_","featureChangeKeys_","featuresCollection_","getArray","Collection","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","featureKey","addToIndex_","setupChangeEvents_","dispatchEvent","events","EventType","handleFeatureChange_","ObjectEventType","PROPERTYCHANGE","valid","newFeatures","geometryFeatures","push","i$1","length$1","feature$1","featureKey$1","i$2","length$2","modifyingCollection","evt","CollectionEventType","ADD","REMOVE","removeFeature","opt_fast","featureId","keys","removeFeatureInternal","clearEvent","forEachFeature","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachFeatureIntersectingExtent","intersectsExtent","getFeaturesCollection","getFeatures","array","getFeaturesAtCoordinate","getFeaturesInExtent","getClosestFeatureToCoordinate","opt_filter","closestFeature","closestPoint","NaN","minSquaredDistance","filter","previousMinSquaredDistance","closestPointXY","minDistance","sqrt","getFeatureById","getFormat","getOverlaps","getUrl","sid","removeFromIdIndex_","hasFeature","loadFeatures","this$1","loadedExtentsRtree","extentsToLoad","loading","loop","ii","extentToLoad","alreadyLoaded","object","removeLoadedExtent","removed","setLoader","source_Source","_LayerType_js__WEBPACK_IMPORTED_MODULE_0__","_Layer_js__WEBPACK_IMPORTED_MODULE_1__","_VectorRenderType_js__WEBPACK_IMPORTED_MODULE_2__","_obj_js__WEBPACK_IMPORTED_MODULE_3__","_style_Style_js__WEBPACK_IMPORTED_MODULE_4__","Property","RENDER_ORDER","VectorLayer","Layer","baseOptions","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","renderBuffer_","updateWhileAnimating_","updateWhileInteracting_","renderMode_","renderMode","VECTOR","getDeclutter","setDeclutter","getRenderBuffer","getRenderOrder","getUpdateWhileAnimating","getUpdateWhileInteracting","setRenderOrder","renderOrder","getRenderMode","getSource","Stroke","lineCap_","lineDash_","lineDashOffset_","lineJoin_","miterLimit_","width_","setLineCap","setLineDashOffset","setLineJoin","setMiterLimit","setWidth"],"mappings":"kHAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAA,IAAAC,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAqJAW,EAAA,SAAAC,GAEA,IAAAC,EAAAD,GAAA,GAMAE,KAAAC,UAAA,KAMAD,KAAAE,kBAAAC,OAEAC,IAAAL,EAAAM,UACAL,KAAAM,YAAAP,EAAAM,UAOAL,KAAAO,WAAAH,IAAAL,EAAAS,KAAAT,EAAAS,KAAA,KAMAR,KAAAS,YAAAL,IAAAL,EAAAW,MAAAX,EAAAW,MAAA,KAMAV,KAAAW,eAAAP,IAAAL,EAAAa,SAAAb,EAAAa,SAAA,KAMAZ,KAAAa,aAAAT,IAAAL,EAAAe,OAAAf,EAAAe,OAAA,KAMAd,KAAAe,WAAAX,IAAAL,EAAAiB,KAAAjB,EAAAiB,KAAA,KAMAhB,KAAAiB,QAAAlB,EAAAmB,QAkMO,SAAA7B,EAAA8B,GACP,IAAAC,EAEA,uBAAAD,EACAC,EAAAD,MACG,CAIH,IAAAE,EACA,GAAAC,MAAAC,QAAAJ,GACAE,EAAAF,MACK,CACCK,OAAAhC,EAAA,KAAAgC,CAA2B,sBAAAC,UACjC,IACA,IAAAC,EAAmC,EACnCL,EAAA,CAAAK,GAEAN,EAAA,WACA,OAAAC,GAGA,OAAAD,EA/MAvB,EAAA8B,UAAAC,MAAA,WACA,IAAAvB,EAAAL,KAAA6B,cAIA,OAHAxB,GAAA,kBAAAA,IACAA,EAAgE,EAAAuB,SAEhE,IAAA/B,EAAA,CACAQ,WACAG,KAAAR,KAAA8B,UAAA9B,KAAA8B,UAAAF,aAAAxB,EACAM,MAAAV,KAAA+B,WAAA/B,KAAA+B,WAAAH,aAAAxB,EACAU,OAAAd,KAAAgC,YAAAhC,KAAAgC,YAAAJ,aAAAxB,EACAY,KAAAhB,KAAAiC,UAAAjC,KAAAiC,UAAAL,aAAAxB,EACAc,OAAAlB,KAAAyB,eAUA5B,EAAA8B,UAAAO,YAAA,WACA,OAAAlC,KAAAW,WASAd,EAAA8B,UAAAQ,YAAA,SAAAvB,GACAZ,KAAAW,UAAAC,GAUAf,EAAA8B,UAAAE,YAAA,WACA,OAAA7B,KAAAC,WASAJ,EAAA8B,UAAAS,oBAAA,WACA,OAAApC,KAAAE,mBAQAL,EAAA8B,UAAAG,QAAA,WACA,OAAA9B,KAAAO,OAQAV,EAAA8B,UAAAU,QAAA,SAAA7B,GACAR,KAAAO,MAAAC,GAQAX,EAAA8B,UAAAI,SAAA,WACA,OAAA/B,KAAAS,QAQAZ,EAAA8B,UAAAW,SAAA,SAAA5B,GACAV,KAAAS,OAAAC,GAQAb,EAAA8B,UAAAK,UAAA,WACA,OAAAhC,KAAAa,SAQAhB,EAAA8B,UAAAY,UAAA,SAAAzB,GACAd,KAAAa,QAAAC,GAQAjB,EAAA8B,UAAAM,QAAA,WACA,OAAAjC,KAAAe,OAQAlB,EAAA8B,UAAAa,QAAA,SAAAxB,GACAhB,KAAAe,MAAAC,GAQAnB,EAAA8B,UAAAF,UAAA,WACA,OAAAzB,KAAAiB,SAWApB,EAAA8B,UAAArB,YAAA,SAAAD,GACA,oBAAAA,EACAL,KAAAE,kBAAAG,EACG,kBAAAA,EACHL,KAAAE,kBAAA,SAAAuC,GACA,OACyDA,EAAAC,IAAArC,IAGtDA,OAEAD,IAAAC,IACHL,KAAAE,kBAAA,WACA,WAHAF,KAAAE,kBAAAC,EAQAH,KAAAC,UAAAI,GASAR,EAAA8B,UAAAgB,UAAA,SAAAzB,GACAlB,KAAAiB,QAAAC,GAyCA,IAAA0B,EAAA,KAQO,SAAAtD,EAAAmD,EAAAI,GAMP,IAAAD,EAAA,CACA,IAAApC,EAAA,IAAmBb,EAAA,KAAI,CACvBmD,MAAA,0BAEAhC,EAAA,IAAqBlB,EAAA,KAAM,CAC3BkD,MAAA,UACAC,MAAA,OAEAH,EAAA,CACA,IAAA/C,EAAA,CACAa,MAAA,IAAmBhB,EAAA,KAAW,CAC9Bc,OACAM,SACAkC,OAAA,IAEAxC,OACAM,YAIA,OAAA8B,EAQO,SAAArD,IAEP,IAAA8B,EAAA,GACA4B,EAAA,gBACAC,EAAA,cACAH,EAAA,EA0DA,OAzDA1B,EAAS5B,EAAA,KAAY0D,SAAA,CACrB,IAAAtD,EAAA,CACAW,KAAA,IAAgBb,EAAA,KAAI,CACpBmD,MAAA,sBAIAzB,EAAS5B,EAAA,KAAY2D,eACrB/B,EAAa5B,EAAA,KAAY0D,SAEzB9B,EAAS5B,EAAA,KAAY4D,aAAA,CACrB,IAAAxD,EAAA,CACAiB,OAAA,IAAkBlB,EAAA,KAAM,CACxBkD,MAAAG,EACAF,QAAA,MAGA,IAAAlD,EAAA,CACAiB,OAAA,IAAkBlB,EAAA,KAAM,CACxBkD,MAAAI,EACAH,aAIA1B,EAAS5B,EAAA,KAAY6D,mBACrBjC,EAAa5B,EAAA,KAAY4D,aAEzBhC,EAAS5B,EAAA,KAAY8D,QACrBlC,EAAa5B,EAAA,KAAY0D,SAAAK,OACzBnC,EAAe5B,EAAA,KAAY4D,cAI3BhC,EAAS5B,EAAA,KAAYgE,OAAA,CACrB,IAAA5D,EAAA,CACAa,MAAA,IAAiBhB,EAAA,KAAW,CAC5BsD,OAAA,EAAAD,EACAvC,KAAA,IAAkBb,EAAA,KAAI,CACtBmD,MAAAI,IAEApC,OAAA,IAAoBlB,EAAA,KAAM,CAC1BkD,MAAAG,EACAF,QAAA,MAGA7B,OAAAwC,OAGArC,EAAS5B,EAAA,KAAYkE,aACrBtC,EAAa5B,EAAA,KAAYgE,OAEzBpC,EAAS5B,EAAA,KAAYmE,qBACrBvC,EAAa5B,EAAA,KAAY0D,SAAAK,OACzBnC,EAAe5B,EAAA,KAAY4D,aAC3BhC,EAAe5B,EAAA,KAAYgE,QAG3BpC,EASA,SAAAlB,EAAAsC,GACA,OAAAA,EAAAZ,cAGezC,EAAA,4CChiBf,IAAAyE,EAAA3E,EAAA,QAAA4E,EAAA5E,EAAA,QAoBA6E,EAAA,SAAAjE,GAEA,IAAAC,EAAAD,GAAA,GAMAE,KAAAgE,YAAA5D,IAAAL,EAAA+C,MAAA/C,EAAA+C,MAAA,KAMA9C,KAAAiE,eAAA7D,GAQA2D,EAAApC,UAAAC,MAAA,WACA,IAAAkB,EAAA9C,KAAAkE,WACA,WAAAH,EAAA,CACAjB,MAAAxB,MAAAC,QAAAuB,KAAAqB,QAAArB,QAAA1C,KASA2D,EAAApC,UAAAuC,SAAA,WACA,OAAAlE,KAAAgE,QASAD,EAAApC,UAAAyC,SAAA,SAAAtB,GACA9C,KAAAgE,OAAAlB,EACA9C,KAAAiE,eAAA7D,GAMA2D,EAAApC,UAAA0C,YAAA,WACA,QAAAjE,IAAAJ,KAAAiE,UAAA,CACA,IAAAnB,EAAA9C,KAAAgE,OACAlB,EACAxB,MAAAC,QAAAuB,IAAA,iBAAAA,EACA9C,KAAAiE,UAAA,IAA+BzC,OAAAsC,EAAA,KAAAtC,CAAuD,GAEtFxB,KAAAiE,UAAyBzC,OAAAqC,EAAA,KAAArC,CAAMxB,KAAAgE,QAG/BhE,KAAAiE,UAAA,KAIA,OAAAjE,KAAAiE,WAGe7E,EAAA,0CClFAA,EAAA,MACfkF,aAAA,cACAC,KAAA,OACAC,KAAA,OACAC,IAAA,4CCXA,IAAAC,EAAAxF,EAAA,QAuBAyF,EAAA,SAAAC,GACA,SAAAD,EAAA7E,GAEA,IAAAC,EAAAD,GAAoD,GAEpD8E,EAAAC,KAAA7E,KAAA,CACA8E,OAAApB,IACAlD,KAAAT,EAAAS,KACAwC,OAAAjD,EAAAiD,OACAlC,OAAAf,EAAAe,OACAiE,aAAAhF,EAAAgF,eAsCA,OAjCAH,IAAAD,EAAAK,UAAAJ,GACAD,EAAAhD,UAAAH,OAAAyD,OAAAL,KAAAjD,WACAgD,EAAAhD,UAAAuD,YAAAP,EAQAA,EAAAhD,UAAAC,MAAA,WACA,IAAAF,EAAA,IAAAiD,EAAA,CACAnE,KAAAR,KAAA8B,UAAA9B,KAAA8B,UAAAF,aAAAxB,EACAU,OAAAd,KAAAgC,YAAAhC,KAAAgC,YAAAJ,aAAAxB,EACA4C,OAAAhD,KAAAmF,YACAJ,aAAA/E,KAAAoF,gBAIA,OAFA1D,EAAA2D,WAAArF,KAAAsF,cACA5D,EAAA6D,SAAAvF,KAAAwF,YACA9D,GASAiD,EAAAhD,UAAA8D,UAAA,SAAAzC,GACAhD,KAAA0F,QAAA1C,EACAhD,KAAA2F,QAAA3F,KAAAoF,gBAGAT,EAhDA,CAiDED,EAAA,MAGatF,EAAA,4CC3Ef,IAAAwG,EAAA1G,EAAA,QAAA2G,EAAA3G,EAAA,QAAA4G,EAAA5G,EAAA,QAAA6G,EAAA7G,EAAA,QAAA8G,EAAA9G,EAAA,QAAA+G,EAAA/G,EAAA,QAAAgH,EAAAhH,EAAA,QAoDA0F,EAAA,SAAAuB,GACA,SAAAvB,EAAA7E,GAIA,IAAAqG,OAAAhG,IAAAL,EAAAqG,gBACArG,EAAAqG,eAEAD,EAAAtB,KAAA7E,KAAA,CACAqG,QAAA,EACAD,iBACAE,cAAAlG,IAAAL,EAAAuG,SAAAvG,EAAAuG,SAAA,EACAC,MAAA,IAOAvG,KAAAwG,WAAA,KAMAxG,KAAAyG,QAAA,KAMAzG,KAAA0G,oBAAA,KAMA1G,KAAAO,WAAAH,IAAAL,EAAAS,KAAAT,EAAAS,KAAA,KAMAR,KAAA2G,QAAA,MAMA3G,KAAA4G,QAAA7G,EAAA+E,OAMA9E,KAAA0F,aAAqCtF,IAAAL,EAAAiD,OACrCjD,EAAAiD,OAAAjD,EAAA8G,QAMA7G,KAAA8G,SAAA/G,EAAAgH,QAMA/G,KAAAgH,YAAA5G,IAAAL,EAAAkH,MAAAlH,EAAAkH,MAAA,EAMAjH,KAAAa,aAAAT,IAAAL,EAAAe,OAAAf,EAAAe,OAAA,KAMAd,KAAAkH,QAAA,KAMAlH,KAAAmH,MAAA,KAMAnH,KAAAoH,WAAA,KAMApH,KAAAqH,uBAAA,KAMArH,KAAAoF,cAAArF,EAAAgF,aAEA/E,KAAA2F,QAAA3F,KAAAoF,eA0aA,OAtaAe,IAAAvB,EAAAI,UAAAmB,GACAvB,EAAAjD,UAAAH,OAAAyD,OAAAkB,KAAAxE,WACAiD,EAAAjD,UAAAuD,YAAAN,EAOAA,EAAAjD,UAAAC,MAAA,WACA,IAAAF,EAAA,IAAAkD,EAAA,CACApE,KAAAR,KAAA8B,UAAA9B,KAAA8B,UAAAF,aAAAxB,EACA0E,OAAA9E,KAAAsH,YACAtE,OAAAhD,KAAAmF,YACA4B,QAAA/G,KAAAuH,aACAN,MAAAjH,KAAAwH,WACA1G,OAAAd,KAAAgC,YAAAhC,KAAAgC,YAAAJ,aAAAxB,EACAkG,SAAAtG,KAAAyH,cACArB,eAAApG,KAAA0H,oBACA3C,aAAA/E,KAAAoF,gBAIA,OAFA1D,EAAA2D,WAAArF,KAAAsF,cACA5D,EAAA6D,SAAAvF,KAAAwF,YACA9D,GAOAkD,EAAAjD,UAAAgG,UAAA,WACA,OAAA3H,KAAAkH,SAQAtC,EAAAjD,UAAA6F,SAAA,WACA,OAAAxH,KAAAgH,QAQApC,EAAAjD,UAAAG,QAAA,WACA,OAAA9B,KAAAO,OAMAqE,EAAAjD,UAAAiG,qBAAA,SAAAC,GACA,OAAA7H,KAAA0G,qBAOA9B,EAAAjD,UAAAI,SAAA,SAAA8F,GACA,OAAA7H,KAAAyG,SAMA7B,EAAAjD,UAAAmG,aAAA,WACA,OAAA9H,KAAAoH,YAMAxC,EAAAjD,UAAAoG,yBAAA,WACA,OAAA/H,KAAAqH,wBAMAzC,EAAAjD,UAAAqG,cAAA,WACA,OAAWhC,EAAA,KAAUiC,QAOrBrD,EAAAjD,UAAAuG,UAAA,WACA,OAAAlI,KAAA2G,SAQA/B,EAAAjD,UAAA2F,UAAA,WACA,OAAAtH,KAAA4G,SAQAhC,EAAAjD,UAAAwD,UAAA,WACA,OAAAnF,KAAA0F,SAQAd,EAAAjD,UAAA4F,WAAA,WACA,OAAAvH,KAAA8G,UAOAlC,EAAAjD,UAAAwG,QAAA,WACA,OAAAnI,KAAAmH,OAQAvC,EAAAjD,UAAAK,UAAA,WACA,OAAAhC,KAAAa,SAMA+D,EAAAjD,UAAAyG,kBAAA,SAAAC,EAAAC,KAOA1D,EAAAjD,UAAA4G,KAAA,aAKA3D,EAAAjD,UAAA6G,oBAAA,SAAAH,EAAAC,KAMA1D,EAAAjD,UAAAgE,QAAA,SAAAZ,GACA,IAAA0D,EAMAC,EALAC,EAAA,GACAC,EAAA,GACAC,EAAA,EACAC,EAAA,KACAC,EAAA,EAEAC,EAAA,EAEAhJ,KAAAa,UACA6H,EAAA1I,KAAAa,QAAAqD,WACA,OAAAwE,IACAA,EAAsBzC,EAAA,MAEtByC,EAAoBlH,OAAAqE,EAAA,KAAArE,CAAWkH,GAC/BM,EAAAhJ,KAAAa,QAAAoI,gBACA7I,IAAA4I,IACAA,EAAsB/C,EAAA,MAEtB6C,EAAA9I,KAAAa,QAAAqI,cACAH,EAAA/I,KAAAa,QAAAsI,oBACWpD,EAAA,OACX+C,EAAA,KACAC,EAAA,GAEAH,EAAA5I,KAAAa,QAAAuI,mBACAhJ,IAAAwI,IACAA,EAAmB3C,EAAA,MAEnB0C,EAAA3I,KAAAa,QAAAwI,kBACAjJ,IAAAuI,IACAA,EAAkB1C,EAAA,MAElB4C,EAAA7I,KAAAa,QAAAyI,qBACAlJ,IAAAyI,IACAA,EAAqB5C,EAAA,OAIrB,IAAAsD,EAAA,GAAAvJ,KAAA0F,QAAAsD,GAAA,EAGAQ,EAAA,CACAd,cACAM,cACAO,OACAZ,UACAG,WACAC,iBACAH,WACAC,cAGA,QAAAzI,IAAA2E,EAAA,CAEA,IAAA0E,EAAoBjI,OAAAsE,EAAA,KAAAtE,CAAqB+H,KACzCvJ,KAAAyG,QAAAgD,EAAAC,OAGAH,EAAAvJ,KAAAyG,QAAA1D,MACA0F,EAAAc,EAEAvJ,KAAA2J,MAAAH,EAAAC,EAAA,KAEAzJ,KAAA4J,0BAAAJ,OACK,CAELD,EAAAM,KAAAC,MAAAP,GAEA,IACAQ,EADAC,GAAAhK,KAAAO,MAEAyJ,IAEAD,EACA/J,KAAAiK,wBAAAC,KAAAlK,KAAAwJ,IAGA,IAAAW,EAAAnK,KAAAqE,cACA+F,EAAArF,EAAAsF,IACAF,EAAAZ,IAAAvJ,KAAA2J,MAAAO,KAAAlK,KAAAwJ,GACAO,GAEA/J,KAAAyG,QAAA2D,EAAA1J,MACAV,KAAA2G,QAAA,CAAAyD,EAAAE,QAAAF,EAAAG,SACA9B,EAAA2B,EAAA1J,MAAAqC,MAEAiH,GACAhK,KAAA0G,oBAAA0D,EAAAI,SACAxK,KAAAqH,uBACA,CAAA+C,EAAAI,SAAAzH,MAAAqH,EAAAI,SAAAC,UAEAzK,KAAA0G,oBAAA1G,KAAAyG,QACAzG,KAAAqH,uBAAA,CAAAoB,MAIAzI,KAAAkH,QAAA,CAAAqC,EAAA,EAAAA,EAAA,GACAvJ,KAAAmH,MAAA,CAAAoC,KACAvJ,KAAAoH,WAAA,CAAAqB,MAUA7D,EAAAjD,UAAAgI,MAAA,SAAAH,EAAAC,EAAAiB,EAAAC,GACA,IAAAC,EAAAC,EAAAC,EAEArB,EAAAsB,aAAA,aAGAtB,EAAAuB,UAAAN,EAAAC,GAEAlB,EAAAwB,YAEA,IAAAnG,EAAA9E,KAAA4G,QACA,GAAA9B,IAAApB,IACA+F,EAAAyB,IACA1B,EAAAD,KAAA,EAAAC,EAAAD,KAAA,EACAvJ,KAAA0F,QAAA,IAAAmE,KAAAsB,IAAA,OACK,CACL,IAAApE,OAAA3G,IAAAJ,KAAA8G,SAAA9G,KAAA8G,SACA9G,KAAA0F,QAIA,IAHAqB,IAAA/G,KAAA0F,UACAZ,GAAA,GAEA8F,EAAA,EAAiBA,GAAA9F,EAAa8F,IAC9BC,EAAA,EAAAD,EAAAf,KAAAsB,GAAArG,EAAA+E,KAAAsB,GAAA,EAAAnL,KAAAgH,OACA8D,EAAAF,EAAA,MAAA5K,KAAA0F,QAAAqB,EACA0C,EAAA2B,OAAA5B,EAAAD,KAAA,EAAAuB,EAAAjB,KAAAwB,IAAAR,GACArB,EAAAD,KAAA,EAAAuB,EAAAjB,KAAAyB,IAAAT,IAKA,GAAA7K,KAAAO,MAAA,CACA,IAAAuC,EAAA9C,KAAAO,MAAA2D,WACA,OAAApB,IACAA,EAAgBmD,EAAA,MAEhBwD,EAAA8B,UAA0B/J,OAAAqE,EAAA,KAAArE,CAAWsB,GACrC2G,EAAAjJ,OAEAR,KAAAa,UACA4I,EAAAf,YAAAc,EAAAd,YACAe,EAAA+B,UAAAhC,EAAAR,YACAQ,EAAAV,WACAW,EAAAgC,YAAAjC,EAAAV,UACAW,EAAAV,eAAAS,EAAAT,gBAEAU,EAAAd,QAAiDa,EAAA,QACjDC,EAAAb,SAAmDY,EAAA,SACnDC,EAAAZ,WAAAW,EAAAX,WACAY,EAAA3I,UAEA2I,EAAAiC,aAOA9G,EAAAjD,UAAAiI,0BAAA,SAAAJ,GAEA,GADAxJ,KAAAqH,uBAAA,CAAAmC,EAAAD,KAAAC,EAAAD,MACAvJ,KAAAO,MACAP,KAAA0G,oBAAA1G,KAAAyG,YADA,CAOA,IAAAgD,EAAkBjI,OAAAsE,EAAA,KAAAtE,CAAqBgI,EAAAD,KAAAC,EAAAD,MACvCvJ,KAAA0G,oBAAA+C,EAAAC,OAEA1J,KAAAiK,wBAAAT,EAAAC,EAAA,OAUA7E,EAAAjD,UAAAsI,wBAAA,SAAAT,EAAAC,EAAAiB,EAAAC,GAEAlB,EAAAsB,aAAA,aAGAtB,EAAAuB,UAAAN,EAAAC,GAEAlB,EAAAwB,YAEA,IAAAnG,EAAA9E,KAAA4G,QACA,GAAA9B,IAAApB,IACA+F,EAAAyB,IACA1B,EAAAD,KAAA,EAAAC,EAAAD,KAAA,EACAvJ,KAAA0F,QAAA,IAAAmE,KAAAsB,IAAA,OACK,CACL,IAKAP,EAAAE,EAAAD,EALA9D,OAAA3G,IAAAJ,KAAA8G,SAAA9G,KAAA8G,SACA9G,KAAA0F,QAKA,IAJAqB,IAAA/G,KAAA0F,UACAZ,GAAA,GAGA8F,EAAA,EAAiBA,GAAA9F,EAAa8F,IAC9BC,EAAA,EAAAD,EAAAf,KAAAsB,GAAArG,EAAA+E,KAAAsB,GAAA,EAAAnL,KAAAgH,OACA8D,EAAAF,EAAA,MAAA5K,KAAA0F,QAAAqB,EACA0C,EAAA2B,OAAA5B,EAAAD,KAAA,EAAAuB,EAAAjB,KAAAwB,IAAAR,GACArB,EAAAD,KAAA,EAAAuB,EAAAjB,KAAAyB,IAAAT,IAIApB,EAAA8B,UAAwB/J,OAAAoE,EAAA,KAAApE,CAASyE,EAAA,MACjCwD,EAAAjJ,OACAR,KAAAa,UACA4I,EAAAf,YAAAc,EAAAd,YACAe,EAAA+B,UAAAhC,EAAAR,YACAQ,EAAAV,WACAW,EAAAgC,YAAAjC,EAAAV,UACAW,EAAAV,eAAAS,EAAAT,gBAEAU,EAAA3I,UAEA2I,EAAAiC,aAMA9G,EAAAjD,UAAA0C,YAAA,WACA,IAAAsH,EAAA3L,KAAAa,QACAb,KAAAa,QAAAwD,cAAA,IACAuH,EAAA5L,KAAAO,MACAP,KAAAO,MAAA8D,cAAA,IAEAwH,GAAA7L,KAAAwG,YACAmF,GAAA3L,KAAAwG,WAAA,IACAoF,GAAA5L,KAAAwG,WAAA,IACAxG,KAAA0F,SAAA1F,KAAAwG,WAAA,IACAxG,KAAA8G,UAAA9G,KAAAwG,WAAA,IACAxG,KAAAgH,QAAAhH,KAAAwG,WAAA,IACAxG,KAAA4G,SAAA5G,KAAAwG,WAAA,GAEA,GAAAqF,EAAA,CACA,IAAAC,EAAA,IAAAH,EAAAC,QACAxL,IAAAJ,KAAA0F,QAAA1F,KAAA0F,QAAAqG,WAAA,WACA3L,IAAAJ,KAAA8G,SAAA9G,KAAA8G,SAAAiF,WAAA,WACA3L,IAAAJ,KAAAgH,OAAAhH,KAAAgH,OAAA+E,WAAA,WACA3L,IAAAJ,KAAA4G,QAAA5G,KAAA4G,QAAAmF,WAAA,KACA/L,KAAAwG,WAAA,CAAAsF,EAAAH,EAAAC,EACA5L,KAAA0F,QAAA1F,KAAA8G,SAAA9G,KAAAgH,OAAAhH,KAAA4G,SAGA,OAA6B5G,KAAAwG,WAAA,IAG7B5B,EAphBA,CAqhBEsB,EAAA,MAGa9G,EAAA,0CC5kBf,IAAAyE,EAAA3E,EAAA,QAuBAiH,EAAA,SAAApG,GAMAC,KAAAgM,SAAAjM,EAAAsG,QAMArG,KAAAiM,gBAAAlM,EAAAqG,eAMApG,KAAAkM,UAAAnM,EAAAuG,SAMAtG,KAAAmM,OAAApM,EAAAwG,OASAJ,EAAAxE,UAAAC,MAAA,WACA,WAAAuE,EAAA,CACAE,QAAArG,KAAAsF,aACAiB,MAAAvG,KAAAwF,WACAc,SAAAtG,KAAAyH,cACArB,eAAApG,KAAA0H,uBASAvB,EAAAxE,UAAA2D,WAAA,WACA,OAAAtF,KAAAgM,UAQA7F,EAAAxE,UAAA+F,kBAAA,WACA,OAAA1H,KAAAiM,iBAQA9F,EAAAxE,UAAA8F,YAAA,WACA,OAAAzH,KAAAkM,WAQA/F,EAAAxE,UAAA6D,SAAA,WACA,OAAAxF,KAAAmM,QASAhG,EAAAxE,UAAAyK,eAAA,WACA,UASAjG,EAAAxE,UAAAgG,UAAA,WACA,OAASnG,OAAAqC,EAAA,KAAArC,IAST2E,EAAAxE,UAAAI,SAAA,SAAA8F,GACA,OAASrG,OAAAqC,EAAA,KAAArC,IAQT2E,EAAAxE,UAAAiG,qBAAA,SAAAC,GACA,OAASrG,OAAAqC,EAAA,KAAArC,IAOT2E,EAAAxE,UAAAqG,cAAA,WACA,OAASxG,OAAAqC,EAAA,KAAArC,IAOT2E,EAAAxE,UAAAmG,aAAA,WACA,OAAStG,OAAAqC,EAAA,KAAArC,IAOT2E,EAAAxE,UAAAoG,yBAAA,WACA,OAASvG,OAAAqC,EAAA,KAAArC,IAQT2E,EAAAxE,UAAAuG,UAAA,WACA,OAAS1G,OAAAqC,EAAA,KAAArC,IAQT2E,EAAAxE,UAAAwG,QAAA,WACA,OAAS3G,OAAAqC,EAAA,KAAArC,IAST2E,EAAAxE,UAAA0D,WAAA,SAAAgB,GACArG,KAAAgM,SAAA3F,GASAF,EAAAxE,UAAA0K,kBAAA,SAAAjG,GACApG,KAAAiM,gBAAA7F,GASAD,EAAAxE,UAAA2K,YAAA,SAAAhG,GACAtG,KAAAkM,UAAA5F,GAQAH,EAAAxE,UAAA4D,SAAA,SAAAgB,GACAvG,KAAAmM,OAAA5F,GASAJ,EAAAxE,UAAA4K,eAAA,SAAAC,KASArG,EAAAxE,UAAAyG,kBAAA,SAAAC,EAAAC,GACA,OAAS9G,OAAAqC,EAAA,KAAArC,IAOT2E,EAAAxE,UAAA4G,KAAA,WACE/G,OAAAqC,EAAA,KAAArC,IASF2E,EAAAxE,UAAA6G,oBAAA,SAAAH,EAAAC,GACE9G,OAAAqC,EAAA,KAAArC,IAGapC,EAAA,0CClQf,IAAAI,EAAAN,EAAA,QAAAuN,EAAAvN,EAAA,QAAAwN,EAAAxN,EAAA,QAAAyN,EAAAzN,EAAA,QA4DA0N,EAAA,SAAAC,GACA,SAAAD,EAAAE,GAuCA,GArCAD,EAAAhI,KAAA7E,MAMAA,KAAA+M,SAAA3M,EAMAJ,KAAAgN,cAAA,WAOAhN,KAAAiN,OAAA,KAMAjN,KAAAkN,oBAAA9M,EAMAJ,KAAAmN,mBAAA,KAEI3L,OAAAiL,EAAA,KAAAjL,CACJxB,KAAYwB,OAAAmL,EAAA,KAAAnL,CAAkBxB,KAAAgN,eAC9BhN,KAAAoN,uBAAApN,MAEA8M,EACA,GAA8B,sBAAAO,sBAAA,CAC9B,IAAAhN,EAAuE,EACvEL,KAAAM,YAAAD,OACO,CAEP,IAAAiN,EAAAR,EACA9M,KAAAuN,cAAAD,IAqKA,OAhKAT,IAAAD,EAAA5H,UAAA6H,GACAD,EAAAjL,UAAAH,OAAAyD,OAAA4H,KAAAlL,WACAiL,EAAAjL,UAAAuD,YAAA0H,EAQAA,EAAAjL,UAAAC,MAAA,WACA,IAAAA,EAAA,IAAAgL,EAAA5M,KAAAwN,iBACA5L,EAAA6L,gBAAAzN,KAAA0N,mBACA,IAAArN,EAAAL,KAAA6B,cACAxB,GACAuB,EAAAtB,YAAAD,EAAAuB,SAEA,IAAAF,EAAA1B,KAAA2N,WAIA,OAHAjM,GACAE,EAAAgM,SAAAlM,GAEAE,GAWAgL,EAAAjL,UAAAE,YAAA,WACA,OACgE7B,KAAA0C,IAAA1C,KAAAgN,gBAWhEJ,EAAAjL,UAAAkM,MAAA,WACA,OAAA7N,KAAA+M,KAUAH,EAAAjL,UAAA+L,gBAAA,WACA,OAAA1N,KAAAgN,eASAJ,EAAAjL,UAAAgM,SAAA,WACA,OAAA3N,KAAAiN,QASAL,EAAAjL,UAAAmM,iBAAA,WACA,OAAA9N,KAAAkN,gBAMAN,EAAAjL,UAAAoM,sBAAA,WACA/N,KAAAgO,WAMApB,EAAAjL,UAAAyL,uBAAA,WACApN,KAAAmN,qBACM3L,OAAAiL,EAAA,KAAAjL,CAAaxB,KAAAmN,oBACnBnN,KAAAmN,mBAAA,MAEA,IAAA9M,EAAAL,KAAA6B,cACAxB,IACAL,KAAAmN,mBAAgC3L,OAAAiL,EAAA,KAAAjL,CAAMnB,EAC9BqM,EAAA,KAASuB,OAAAjO,KAAA+N,sBAAA/N,OAEjBA,KAAAgO,WAUApB,EAAAjL,UAAArB,YAAA,SAAAD,GACAL,KAAAkO,IAAAlO,KAAAgN,cAAA3M,IAWAuM,EAAAjL,UAAAiM,SAAA,SAAAlM,GACA1B,KAAAiN,OAAAvL,EACA1B,KAAAkN,eAAAxL,EAAAyM,EAAAzM,QAAAtB,EACAJ,KAAAgO,WAYApB,EAAAjL,UAAAyM,MAAA,SAAAjE,GACAnK,KAAA+M,IAAA5C,EACAnK,KAAAgO,WAUApB,EAAAjL,UAAA8L,gBAAA,SAAAY,GACI7M,OAAAiL,EAAA,KAAAjL,CACJxB,KAAYwB,OAAAmL,EAAA,KAAAnL,CAAkBxB,KAAAgN,eAC9BhN,KAAAoN,uBAAApN,MACAA,KAAAgN,cAAAqB,EACI7M,OAAAiL,EAAA,KAAAjL,CACJxB,KAAYwB,OAAAmL,EAAA,KAAAnL,CAAkBxB,KAAAgN,eAC9BhN,KAAAoN,uBAAApN,MACAA,KAAAoN,0BAGAR,EApNA,CAqNED,EAAA,MAWK,SAAAwB,EAAAhN,GACP,uBAAAA,EACA,OAAAA,EAKA,IAAAE,EACA,GAAAC,MAAAC,QAAAJ,GACAE,EAAAF,MACK,CACCK,OAAAhC,EAAA,KAAAgC,CAA2B,sBAAAC,UACjC,IACA,IAAAC,EAAgE,EAChEL,EAAA,CAAAK,GAEA,kBACA,OAAAL,GAIejC,EAAA,8LCjQR,SAAAkP,EAAAC,EAAAC,EAAAC,EAAAC,GACP,gBAOAC,EAAA9L,EAAA+L,GACA,IAAAC,EAAA,IAAAC,eACAD,EAAAE,KAAA,MACA,oBAAAR,IAAAI,EAAA9L,EAAA+L,GAAAL,GACA,GACAC,EAAAQ,WAA8BC,EAAA,KAAU3K,eACxCuK,EAAAK,aAAA,eAMAL,EAAAM,OAAA,SAAAC,GAEA,IAAAP,EAAAQ,QAAAR,EAAAQ,QAAA,KAAAR,EAAAQ,OAAA,KACA,IAEAC,EAFAC,EAAAf,EAAAQ,UAGAO,GAAsBN,EAAA,KAAU1K,MAAAgL,GAAiBN,EAAA,KAAUzK,KAC3D8K,EAAAT,EAAAW,aACWD,GAAkBN,EAAA,KAAUxK,KACvC6K,EAAAT,EAAAY,YACAH,IACAA,GAAA,IAAAI,WAAAC,gBAAAd,EAAAW,aAAA,qBAEWD,GAAkBN,EAAA,KAAU3K,eACvCgL,EAA4CT,EAAA,UAE5CS,EACAb,EAAA5J,KAAA7E,KAAAwO,EAAAoB,aAAAN,EACA,CAAeO,kBAAAjB,IACfJ,EAAAsB,eAAAR,GAAAd,EAAAuB,iBAEArB,EAAA7J,KAAA7E,WAGA0O,EAAA7J,KAAA7E,OAEOkK,KAAAlK,MAIP6O,EAAAmB,QAAA,WACAtB,EAAA7J,KAAA7E,OACOkK,KAAAlK,MACP6O,EAAAoB,QAeO,SAASC,EAAG3B,EAAAC,GACnB,OAAAF,EAAAC,EAAAC,EAOA,SAAA2B,EAAAC,GACA,IAAAC,EAAsC,KACtC,oBAAAA,EAAAC,aACqD,EAAAA,YAAAH,IAErBI,EAAA,MCrHzB,SAASC,EAAG7B,EAAA9L,GACnB,SAAAa,2DCNe+M,EAAA,CAMfC,WAAA,aAOAC,cAAA,gBAOAC,MAAA,QAQAC,cAAA,sCCXIC,EAAK,SAAAC,GAKT/Q,KAAAgR,OAAgBC,IAAKF,OAAA3Q,GAQrBJ,KAAAkR,OAAA,IASAJ,EAAKnP,UAAAwP,OAAA,SAAAxC,EAAAyC,GAEL,IAAAC,EAAA,CACAC,KAAA3C,EAAA,GACA4C,KAAA5C,EAAA,GACA6C,KAAA7C,EAAA,GACA8C,KAAA9C,EAAA,GACAyC,SAGApR,KAAAgR,OAAAG,OAAAE,GACArR,KAAAkR,OAAc1P,OAAAkQ,EAAA,KAAAlQ,CAAM4P,IAAAC,GASpBP,EAAKnP,UAAA4G,KAAA,SAAAoJ,EAAAC,GAEL,IADA,IAAAC,EAAA,IAAAvQ,MAAAsQ,EAAAE,QACAlH,EAAA,EAAAmH,EAAAH,EAAAE,OAAoClH,EAAAmH,EAAOnH,IAAA,CAC3C,IAAA+D,EAAAgD,EAAA/G,GACAwG,EAAAQ,EAAAhH,GAGAyG,EAAA,CACAC,KAAA3C,EAAA,GACA4C,KAAA5C,EAAA,GACA6C,KAAA7C,EAAA,GACA8C,KAAA9C,EAAA,GACAyC,SAEAS,EAAAjH,GAAAyG,EACArR,KAAAkR,OAAgB1P,OAAAkQ,EAAA,KAAAlQ,CAAM4P,IAAAC,EAEtBrR,KAAAgR,OAAAzI,KAAAsJ,IASAf,EAAKnP,UAAAqQ,OAAA,SAAAZ,GACL,IAAAa,EAAYzQ,OAAAkQ,EAAA,KAAAlQ,CAAM4P,GAIlBC,EAAArR,KAAAkR,OAAAe,GAEA,cADAjS,KAAAkR,OAAAe,GACA,OAAAjS,KAAAgR,OAAAgB,OAAAX,IASAP,EAAKnP,UAAAuQ,OAAA,SAAAvD,EAAAyC,GACL,IAAAC,EAAArR,KAAAkR,OAAyB1P,OAAAkQ,EAAA,KAAAlQ,CAAM4P,IAC/Be,EAAA,CAAAd,EAAAC,KAAAD,EAAAE,KAAAF,EAAAG,KAAAH,EAAAI,MACOjQ,OAAA4Q,EAAA,KAAA5Q,CAAM2Q,EAAAxD,KACb3O,KAAAgS,OAAAZ,GACApR,KAAAmR,OAAAxC,EAAAyC,KASAN,EAAKnP,UAAA0Q,OAAA,WACL,IAAAR,EAAA7R,KAAAgR,OAAAsB,MACA,OAAAT,EAAAU,IAAA,SAAAlB,GACA,OAAAA,EAAAD,SAUAN,EAAKnP,UAAA6Q,YAAA,SAAA7D,GAEL,IAAAwD,EAAA,CACAb,KAAA3C,EAAA,GACA4C,KAAA5C,EAAA,GACA6C,KAAA7C,EAAA,GACA8C,KAAA9C,EAAA,IAEAkD,EAAA7R,KAAAgR,OAAAyB,OAAAN,GACA,OAAAN,EAAAU,IAAA,SAAAlB,GACA,OAAAA,EAAAD,SAcAN,EAAKnP,UAAA+Q,QAAA,SAAAC,EAAAC,GACL,OAAA5S,KAAA6S,SAAA7S,KAAAqS,SAAAM,EAAAC,IAYA9B,EAAKnP,UAAAmR,gBAAA,SAAAnE,EAAAgE,EAAAC,GACL,OAAA5S,KAAA6S,SAAA7S,KAAAwS,YAAA7D,GAAAgE,EAAAC,IAYA9B,EAAKnP,UAAAkR,SAAA,SAAAjB,EAAAe,EAAAC,GAEL,IADA,IAAAG,EACAnI,EAAA,EAAAmH,EAAAH,EAAAE,OAAoClH,EAAAmH,EAAOnH,IAE3C,GADAmI,EAAAJ,EAAA9N,KAAA+N,EAAAhB,EAAAhH,IACAmI,EACA,OAAAA,EAGA,OAAAA,GAOAjC,EAAKnP,UAAAqR,QAAA,WACL,OAASxR,OAAAyR,EAAA,KAAAzR,CAAOxB,KAAAkR,SAOhBJ,EAAKnP,UAAAuR,MAAA,WACLlT,KAAAgR,OAAAkC,QACAlT,KAAAkR,OAAA,IAQAJ,EAAKnP,UAAAwR,UAAA,SAAAC,GACL,IAAAC,EAAArT,KAAAgR,OAAAsC,SACA,OAAS9R,OAAA4Q,EAAA,KAAA5Q,CAAc6R,EAAA/B,KAAA+B,EAAA9B,KAAA8B,EAAA7B,KAAA6B,EAAA5B,KAAA2B,IAOvBtC,EAAKnP,UAAA6B,OAAA,SAAA+P,GAEL,QAAA3I,KADA5K,KAAAgR,OAAAzI,KAAAgL,EAAAvC,OAAAsB,OACAiB,EAAArC,OACAlR,KAAAkR,OAAAtG,GAAA2I,EAAArC,OAAAtG,IAKe,IAAA4I,EAAA,ECrMRC,EAAA,SAAAC,GACP,SAAAD,EAAAlE,EAAAoE,GAEAD,EAAA7O,KAAA7E,KAAAuP,GAOAvP,KAAAyC,QAAAkR,EAQA,OAJAD,IAAAD,EAAAzO,UAAA0O,GACAD,EAAA9R,UAAAH,OAAAyD,OAAAyO,KAAA/R,WACA8R,EAAA9R,UAAAuD,YAAAuO,EAEAA,EAlBO,CAmBLC,EAAA,MAsGEE,EAAY,SAAAC,GAChB,SAAAC,EAAAhU,GAEA,IAAAC,EAAAD,GAAA,GAEA+T,EAAAhP,KAAA7E,KAAA,CACA+T,aAAAhU,EAAAgU,aACAnF,gBAAAxO,EACA4T,MAAaC,EAAA,KAAWC,MACxBC,WAAA/T,IAAAL,EAAAoU,OAAApU,EAAAoU,QAOAnU,KAAAoU,QAAmB7D,EAAA,KAMnBvQ,KAAAqU,QAAAtU,EAAAyO,OAMAxO,KAAAsU,eAAAlU,GAAAL,EAAAwU,UAAAxU,EAAAwU,SAMAvU,KAAAwU,KAAAzU,EAAAwO,SAEAnO,IAAAL,EAAA0U,OACAzU,KAAAoU,QAAArU,EAAA0U,YACKrU,IAAAJ,KAAAwU,OACChT,OAAAkT,EAAA,KAAAlT,CAAMxB,KAAAqU,QAAA,GAEZrU,KAAAoU,QAAqBlE,EAAGlQ,KAAAwU,KAA8DxU,KAAA,UAOtFA,KAAA2U,eAAAvU,IAAAL,EAAA6U,SAAA7U,EAAA6U,SAAyEpE,EAEzE,IA+CAqE,EAAA1E,EA/CA2E,OACA1U,IAAAL,EAAA+U,iBAAA/U,EAAA+U,gBAMA9U,KAAA+U,eAAAD,EAAA,IAAgDtB,EAAK,KAMrDxT,KAAAgV,oBAAA,IAAmCxB,EAMnCxT,KAAAiV,sBAAA,GAOAjV,KAAAkV,SAAA,GAOAlV,KAAAmV,cAAA,GAMAnV,KAAAoV,mBAAA,GAMApV,KAAAqV,oBAAA,KAGA/T,MAAAC,QAAAxB,EAAAoQ,UACAA,EAAApQ,EAAAoQ,SACKpQ,EAAAoQ,WACL0E,EAAA9U,EAAAoQ,SACAA,EAAA0E,EAAAS,YAEAR,QAAA1U,IAAAyU,IACAA,EAAA,IAAuBU,EAAA,KAAUpF,SAEjC/P,IAAA+P,GACAnQ,KAAAwV,oBAAArF,QAEA/P,IAAAyU,GACA7U,KAAAyV,wBAAAZ,GAmtBA,OA9sBAhB,IAAAC,EAAA9O,UAAA6O,GACAC,EAAAnS,UAAAH,OAAAyD,OAAA4O,KAAAlS,WACAmS,EAAAnS,UAAAuD,YAAA4O,EAWAA,EAAAnS,UAAA+T,WAAA,SAAAjT,GACAzC,KAAA2V,mBAAAlT,GACAzC,KAAAgO,WASA8F,EAAAnS,UAAAgU,mBAAA,SAAAlT,GACA,IAAAmT,EAAqBpU,OAAAkQ,EAAA,KAAAlQ,CAAMiB,GAE3B,GAAAzC,KAAA6V,YAAAD,EAAAnT,GAAA,CAIAzC,KAAA8V,mBAAAF,EAAAnT,GAEA,IAAApC,EAAAoC,EAAAZ,cACA,GAAAxB,EAAA,CACA,IAAAsO,EAAAtO,EAAA8S,YACAnT,KAAA+U,gBACA/U,KAAA+U,eAAA5D,OAAAxC,EAAAlM,QAGAzC,KAAAiV,sBAAAW,GAAAnT,EAGAzC,KAAA+V,cACA,IAAAtC,EAA4BhD,EAAeC,WAAAjO,MAS3CqR,EAAAnS,UAAAmU,mBAAA,SAAAF,EAAAnT,GACAzC,KAAAoV,mBAAAQ,GAAA,CACMpU,OAAAwU,EAAA,KAAAxU,CAAMiB,EAAUwT,EAAA,KAAShI,OAC/BjO,KAAAkW,qBAAAlW,MACMwB,OAAAwU,EAAA,KAAAxU,CAAMiB,EAAU0T,EAAA,KAAeC,eACrCpW,KAAAkW,qBAAAlW,QAYA8T,EAAAnS,UAAAkU,YAAA,SAAAD,EAAAnT,GACA,IAAA4T,GAAA,EACAlM,EAAA1H,EAAAoL,QAYA,YAXAzN,IAAA+J,EACAA,EAAA4B,aAAA/L,KAAAkV,SAGAmB,GAAA,EAFArW,KAAAkV,SAAA/K,EAAA4B,YAAAtJ,GAKMjB,OAAAkT,EAAA,KAAAlT,GAAMoU,KAAA5V,KAAAmV,eACZ,IACAnV,KAAAmV,cAAAS,GAAAnT,GAEA4T,GASAvC,EAAAnS,UAAA2O,YAAA,SAAAH,GACAnQ,KAAAwV,oBAAArF,GACAnQ,KAAAgO,WASA8F,EAAAnS,UAAA6T,oBAAA,SAAArF,GAKA,IAJA,IAAAwB,EAAA,GACA2E,EAAA,GACAC,EAAA,GAEA3L,EAAA,EAAAkH,EAAA3B,EAAA2B,OAA6ClH,EAAAkH,EAAYlH,IAAA,CACzD,IAAAnI,EAAA0N,EAAAvF,GACAgL,EAAuBpU,OAAAkQ,EAAA,KAAAlQ,CAAMiB,GAC7BzC,KAAA6V,YAAAD,EAAAnT,IACA6T,EAAAE,KAAA/T,GAIA,QAAAgU,EAAA,EAAAC,EAAAJ,EAAAxE,OAAoD2E,EAAAC,EAAgBD,IAAA,CACpE,IAAAE,EAAAL,EAAAG,GACAG,EAAyBpV,OAAAkQ,EAAA,KAAAlQ,CAAMmV,GAC/B3W,KAAA8V,mBAAAc,EAAAD,GAEA,IAAAtW,EAAAsW,EAAA9U,cACA,GAAAxB,EAAA,CACA,IAAAsO,EAAAtO,EAAA8S,YACAxB,EAAA6E,KAAA7H,GACA4H,EAAAC,KAAAG,QAEA3W,KAAAiV,sBAAA2B,GAAAD,EAGA3W,KAAA+U,gBACA/U,KAAA+U,eAAAxM,KAAAoJ,EAAA4E,GAGA,QAAAM,EAAA,EAAAC,EAAAR,EAAAxE,OAAoD+E,EAAAC,EAAgBD,IACpE7W,KAAA+V,cAAA,IAAAtC,EAA+ChD,EAAeC,WAAA4F,EAAAO,MAS9D/C,EAAAnS,UAAA8T,wBAAA,SAAAZ,GACA,IAAAkC,GAAA,EACIvV,OAAAwU,EAAA,KAAAxU,CAAMxB,KAAOyQ,EAAeC,WAIhC,SAAAsG,GACAD,IACAA,GAAA,EACAlC,EAAA2B,KAAAQ,EAAAvU,SACAsU,GAAA,KAGIvV,OAAAwU,EAAA,KAAAxU,CAAMxB,KAAOyQ,EAAeI,cAIhC,SAAAmG,GACAD,IACAA,GAAA,EACAlC,EAAA7C,OAAAgF,EAAAvU,SACAsU,GAAA,KAGIvV,OAAAwU,EAAA,KAAAxU,CAAMqT,EAAaoC,EAAA,KAAmBC,IAI1C,SAAAF,GACAD,IACAA,GAAA,EACA/W,KAAA0V,WAAqEsB,EAAA,SACrED,GAAA,IAEO/W,MACHwB,OAAAwU,EAAA,KAAAxU,CAAMqT,EAAaoC,EAAA,KAAmBE,OAI1C,SAAAH,GACAD,IACAA,GAAA,EACA/W,KAAAoX,cAAwEJ,EAAA,SACxED,GAAA,IAEO/W,MACPA,KAAAqV,oBAAAR,GASAf,EAAAnS,UAAAuR,MAAA,SAAAmE,GACA,GAAAA,EAAA,CACA,QAAAC,KAAAtX,KAAAoV,mBAAA,CACA,IAAAmC,EAAAvX,KAAAoV,mBAAAkC,GACAC,EAAA7E,QAAqBsD,EAAA,MAErBhW,KAAAqV,sBACArV,KAAAoV,mBAAA,GACApV,KAAAkV,SAAA,GACAlV,KAAAmV,cAAA,SAGA,GAAAnV,KAAA+U,eAEA,QAAA5K,KADAnK,KAAA+U,eAAArC,QAAA1S,KAAAwX,sBAAAxX,MACAA,KAAAiV,sBACAjV,KAAAwX,sBAAAxX,KAAAiV,sBAAA9K,IAIAnK,KAAAqV,qBACArV,KAAAqV,oBAAAnC,QAGAlT,KAAA+U,gBACA/U,KAAA+U,eAAA7B,QAEAlT,KAAAgV,oBAAA9B,QACAlT,KAAAiV,sBAAA,GAEA,IAAAwC,EAAA,IAAAhE,EAA2ChD,EAAeG,OAC1D5Q,KAAA+V,cAAA0B,GACAzX,KAAAgO,WAgBA8F,EAAAnS,UAAA+V,eAAA,SAAA/E,GACA,GAAA3S,KAAA+U,eACA,OAAA/U,KAAA+U,eAAArC,QAAAC,GACK3S,KAAAqV,qBACLrV,KAAAqV,oBAAA3C,QAAAC,IAiBAmB,EAAAnS,UAAAgW,iCAAA,SAAAC,EAAAjF,GACA,IAAAhE,EAAA,CAAAiJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,OAAA5X,KAAA6X,uBAAAlJ,EAAA,SAAAlM,GACA,IAAApC,EAAAoC,EAAAZ,cACA,OAAAxB,EAAAyX,qBAAAF,GACAjF,EAAAlQ,QAEA,KAyBAqR,EAAAnS,UAAAkW,uBAAA,SAAAlJ,EAAAgE,GACA,GAAA3S,KAAA+U,eACA,OAAA/U,KAAA+U,eAAAjC,gBAAAnE,EAAAgE,GACK3S,KAAAqV,qBACLrV,KAAAqV,oBAAA3C,QAAAC,IAoBAmB,EAAAnS,UAAAoW,iCAAA,SAAApJ,EAAAgE,GACA,OAAA3S,KAAA6X,uBAAAlJ,EAKA,SAAAlM,GACA,IAAApC,EAAAoC,EAAAZ,cACA,GAAAxB,EAAA2X,iBAAArJ,GAAA,CACA,IAAAoE,EAAAJ,EAAAlQ,GACA,GAAAsQ,EACA,OAAAA,MAcAe,EAAAnS,UAAAsW,sBAAA,WACA,OAAAjY,KAAAqV,qBASAvB,EAAAnS,UAAAuW,YAAA,WACA,IAAA/H,EASA,OARAnQ,KAAAqV,oBACAlF,EAAAnQ,KAAAqV,oBAAAC,WACKtV,KAAA+U,iBACL5E,EAAAnQ,KAAA+U,eAAA1C,SACW7Q,OAAAyR,EAAA,KAAAzR,CAAOxB,KAAAiV,wBACVzT,OAAA2W,EAAA,KAAA3W,CAAM2O,EAAW3O,OAAAyR,EAAA,KAAAzR,CAASxB,KAAAiV,yBAGlC,GAYAnB,EAAAnS,UAAAyW,wBAAA,SAAAR,GACA,IAAAzH,EAAA,GAIA,OAHAnQ,KAAA2X,iCAAAC,EAAA,SAAAnV,GACA0N,EAAAqG,KAAA/T,KAEA0N,GAeA2D,EAAAnS,UAAA0W,oBAAA,SAAA1J,GACA,OAAA3O,KAAA+U,eAAAvC,YAAA7D,IAgBAmF,EAAAnS,UAAA2W,8BAAA,SAAAV,EAAAW,GAQA,IAAA7N,EAAAkN,EAAA,GACAjN,EAAAiN,EAAA,GACAY,EAAA,KACAC,EAAA,CAAAC,SACAC,EAAAjV,IACAiL,EAAA,EAAAjL,kBACAkV,EAAAL,GAA2ChI,EAAA,KAyB3C,OAxBAvQ,KAAA+U,eAAAjC,gBAAAnE,EAIA,SAAAlM,GACA,GAAAmW,EAAAnW,GAAA,CACA,IAAApC,EAAAoC,EAAAZ,cACAgX,EAAAF,EAGA,GAFAA,EAAAtY,EAAAyY,eACApO,EAAAC,EAAA8N,EAAAE,GACAA,EAAAE,EAAA,CACAL,EAAA/V,EAKA,IAAAsW,EAAAlP,KAAAmP,KAAAL,GACAhK,EAAA,GAAAjE,EAAAqO,EACApK,EAAA,GAAAhE,EAAAoO,EACApK,EAAA,GAAAjE,EAAAqO,EACApK,EAAA,GAAAhE,EAAAoO,MAIAP,GAcA1E,EAAAnS,UAAAwR,UAAA,SAAAC,GACA,OAAApT,KAAA+U,eAAA5B,UAAAC,IAaAU,EAAAnS,UAAAsX,eAAA,SAAA9O,GACA,IAAA1H,EAAAzC,KAAAkV,SAAA/K,EAAA4B,YACA,YAAA3L,IAAAqC,IAAA,MAUAqR,EAAAnS,UAAAuX,UAAA,WACA,OAAAlZ,KAAAqU,SAOAP,EAAAnS,UAAAwX,YAAA,WACA,OAAAnZ,KAAAsU,WAUAR,EAAAnS,UAAAyX,OAAA,WACA,OAAApZ,KAAAwU,MAQAV,EAAAnS,UAAAuU,qBAAA,SAAA9G,GACA,IAAA3M,EAA6D2M,EAAA,OAC7DwG,EAAqBpU,OAAAkQ,EAAA,KAAAlQ,CAAMiB,GAC3BpC,EAAAoC,EAAAZ,cACA,GAAAxB,EAOK,CACL,IAAAsO,EAAAtO,EAAA8S,YACAyC,KAAA5V,KAAAiV,8BACAjV,KAAAiV,sBAAAW,GACA5V,KAAA+U,gBACA/U,KAAA+U,eAAA5D,OAAAxC,EAAAlM,IAGAzC,KAAA+U,gBACA/U,KAAA+U,eAAA7C,OAAAvD,EAAAlM,QAfAmT,KAAA5V,KAAAiV,wBACAjV,KAAA+U,gBACA/U,KAAA+U,eAAA/C,OAAAvP,GAEAzC,KAAAiV,sBAAAW,GAAAnT,GAeA,IAAA0H,EAAA1H,EAAAoL,QACA,QAAAzN,IAAA+J,EAAA,CACA,IAAAkP,EAAAlP,EAAA4B,WACA6J,KAAA5V,KAAAmV,sBACAnV,KAAAmV,cAAAS,GACA5V,KAAAkV,SAAAmE,GAAA5W,GAEAzC,KAAAkV,SAAAmE,KAAA5W,IACAzC,KAAAsZ,mBAAA7W,GACAzC,KAAAkV,SAAAmE,GAAA5W,QAIAmT,KAAA5V,KAAAmV,gBACAnV,KAAAsZ,mBAAA7W,GACAzC,KAAAmV,cAAAS,GAAAnT,GAGAzC,KAAAgO,UACAhO,KAAA+V,cAAA,IAAAtC,EACMhD,EAAeE,cAAAlO,KASrBqR,EAAAnS,UAAA4X,WAAA,SAAA9W,GACA,IAAA0H,EAAA1H,EAAAoL,QACA,YAAAzN,IAAA+J,EACAA,KAAAnK,KAAAkV,SAEa1T,OAAAkQ,EAAA,KAAAlQ,CAAMiB,KAAAzC,KAAAmV,eAOnBrB,EAAAnS,UAAAqR,QAAA,WACA,OAAAhT,KAAA+U,eAAA/B,WAA4CxR,OAAAyR,EAAA,KAAAzR,CAAOxB,KAAAiV,wBASnDnB,EAAAnS,UAAA6X,aAAA,SAAA7K,EAAA9L,EAAA+L,GACA,IAAA6K,EAAAzZ,KAEA0Z,EAAA1Z,KAAAgV,oBACA2E,EAAA3Z,KAAA2U,UAAAhG,EAAA9L,GACA7C,KAAA4Z,SAAA,EAkBA,IAjBA,IAAAC,EAAA,SAAAjP,EAAAkP,GACA,IAAAC,EAAAJ,EAAA/O,GACAoP,EAAAN,EAAA5G,gBAAAiH,EAKA,SAAAE,GACA,OAAiBzY,OAAA4Q,EAAA,KAAA5Q,CAAcyY,EAAAtL,OAAAoL,KAE/BC,IACAP,EAAArF,QAAAvP,KAAA4U,EAAAM,EAAAlX,EAAA+L,GACA8K,EAAAvI,OAAA4I,EAAA,CAAiDpL,OAAAoL,EAAA5V,UACjDsV,EAAAG,QAAAH,EAAArF,UAA4C7D,EAAA,OAI5C3F,EAAA,EAAAkP,EAAAH,EAAA7H,OAA8ClH,EAAAkP,IAAQlP,EAAAiP,EAAAjP,EAAAkP,IAStDhG,EAAAnS,UAAAuY,mBAAA,SAAAvL,GACA,IACAxN,EADAuY,EAAA1Z,KAAAgV,oBAEA0E,EAAA5G,gBAAAnE,EAAA,SAAAsL,GACA,GAAUzY,OAAA4Q,EAAA,KAAA5Q,CAAMyY,EAAAtL,UAEhB,OADAxN,EAAA8Y,GACA,IAGA9Y,GACAuY,EAAA1H,OAAA7Q,IAYA2S,EAAAnS,UAAAyV,cAAA,SAAA3U,GACA,IAAAmT,EAAqBpU,OAAAkQ,EAAA,KAAAlQ,CAAMiB,GAC3BmT,KAAA5V,KAAAiV,6BACAjV,KAAAiV,sBAAAW,GAEA5V,KAAA+U,gBACA/U,KAAA+U,eAAA/C,OAAAvP,GAGAzC,KAAAwX,sBAAA/U,GACAzC,KAAAgO,WASA8F,EAAAnS,UAAA6V,sBAAA,SAAA/U,GACA,IAAAmT,EAAqBpU,OAAAkQ,EAAA,KAAAlQ,CAAMiB,GAC3BzC,KAAAoV,mBAAAQ,GAAAlD,QAAgDsD,EAAA,aAChDhW,KAAAoV,mBAAAQ,GACA,IAAAzL,EAAA1H,EAAAoL,aACAzN,IAAA+J,SACAnK,KAAAkV,SAAA/K,EAAA4B,mBAEA/L,KAAAmV,cAAAS,GAEA5V,KAAA+V,cAAA,IAAAtC,EACMhD,EAAeI,cAAApO,KAWrBqR,EAAAnS,UAAA2X,mBAAA,SAAA7W,GACA,IAAA0X,GAAA,EACA,QAAAhQ,KAAAnK,KAAAkV,SACA,GAAAlV,KAAAkV,SAAA/K,KAAA1H,EAAA,QACAzC,KAAAkV,SAAA/K,GACAgQ,GAAA,EACA,MAGA,OAAAA,GAUArG,EAAAnS,UAAAyY,UAAA,SAAA3F,GACAzU,KAAAoU,QAAAK,GAGAX,EAl0BgB,CAm0BduG,EAAA,MAGajb,EAAA,0CCr+Bf,IAAAkb,EAAApb,EAAA,QAAAqb,EAAArb,EAAA,QAAAsb,EAAAtb,EAAA,QAAAub,EAAAvb,EAAA,QAAAwb,EAAAxb,EAAA,QA4DAyb,EAAA,CACAC,aAAA,eAaAC,EAAA,SAAAC,GACA,SAAAD,EAAA/a,GACA,IAAAC,EAAAD,GACuC,GAEvCib,EAAsBvZ,OAAAiZ,EAAA,KAAAjZ,CAAM,GAAGzB,UAE/Bgb,EAAArZ,aACAqZ,EAAAC,oBACAD,EAAAE,4BACAF,EAAAG,uBACAJ,EAAAjW,KAAA7E,KAAA+a,GAMA/a,KAAAmb,gBAAA/a,IAAAL,EAAAqb,WAAArb,EAAAqb,UAMApb,KAAAqb,mBAAAjb,IAAAL,EAAAib,aACAjb,EAAAib,aAAA,IAOAhb,KAAAiN,OAAA,KAOAjN,KAAAkN,oBAAA9M,EAEAJ,KAAA4N,SAAA7N,EAAA2B,OAMA1B,KAAAsb,2BAAAlb,IAAAL,EAAAkb,sBACAlb,EAAAkb,qBAMAjb,KAAAub,6BAAAnb,IAAAL,EAAAmb,wBACAnb,EAAAmb,uBAMAlb,KAAAwb,YAAAzb,EAAA0b,YAA6CjB,EAAA,KAAgBkB,OAO7D1b,KAAAuP,KAAgB+K,EAAA,KAASoB,OA2GzB,OAvGAZ,IAAAD,EAAA7V,UAAA8V,GACAD,EAAAlZ,UAAAH,OAAAyD,OAAA6V,KAAAnZ,WACAkZ,EAAAlZ,UAAAuD,YAAA2V,EAKAA,EAAAlZ,UAAAga,aAAA,WACA,OAAA3b,KAAAmb,YAMAN,EAAAlZ,UAAAia,aAAA,SAAAR,GACApb,KAAAmb,WAAAC,GAMAP,EAAAlZ,UAAAka,gBAAA,WACA,OAAA7b,KAAAqb,eAOAR,EAAAlZ,UAAAma,eAAA,WACA,OACmE9b,KAAA0C,IAAAiY,EAAAC,eAWnEC,EAAAlZ,UAAAgM,SAAA,WACA,OAAA3N,KAAAiN,QAQA4N,EAAAlZ,UAAAmM,iBAAA,WACA,OAAA9N,KAAAkN,gBAOA2N,EAAAlZ,UAAAoa,wBAAA,WACA,OAAA/b,KAAAsb,uBAOAT,EAAAlZ,UAAAqa,0BAAA,WACA,OAAAhc,KAAAub,yBAOAV,EAAAlZ,UAAAsa,eAAA,SAAAC,GACAlc,KAAAkO,IAAAyM,EAAAC,aAAAsB,IAaArB,EAAAlZ,UAAAiM,SAAA,SAAAlM,GACA1B,KAAAiN,YAAA7M,IAAAsB,IAAgDgZ,EAAA,KAChD1a,KAAAkN,eAAA,OAAAxL,OACAtB,EAAkBoB,OAAAkZ,EAAA,KAAAlZ,CAAexB,KAAAiN,QACjCjN,KAAAgO,WAMA6M,EAAAlZ,UAAAwa,cAAA,WACA,OAAAnc,KAAAwb,aAGAX,EA9KA,CA+KEN,EAAA,MASFM,EAAAlZ,UAAAya,UAGehd,EAAA,0CCrQf,IAAAyE,EAAA3E,EAAA,QA8BAmd,EAAA,SAAAvc,GAEA,IAAAC,EAAAD,GAAA,GAMAE,KAAAgE,YAAA5D,IAAAL,EAAA+C,MAAA/C,EAAA+C,MAAA,KAMA9C,KAAAsc,SAAAvc,EAAA4I,QAMA3I,KAAAuc,eAAAnc,IAAAL,EAAA+I,SAAA/I,EAAA+I,SAAA,KAMA9I,KAAAwc,gBAAAzc,EAAAgJ,eAMA/I,KAAAyc,UAAA1c,EAAA6I,SAMA5I,KAAA0c,YAAA3c,EAAA8I,WAMA7I,KAAA2c,OAAA5c,EAAAgD,MAMA/C,KAAAiE,eAAA7D,GAQAic,EAAA1a,UAAAC,MAAA,WACA,IAAAkB,EAAA9C,KAAAkE,WACA,WAAAmY,EAAA,CACAvZ,MAAAxB,MAAAC,QAAAuB,KAAAqB,QAAArB,QAAA1C,EACAuI,QAAA3I,KAAAqJ,aACAP,SAAA9I,KAAAkJ,cAAAlJ,KAAAkJ,cAAA/E,aAAA/D,EACA2I,eAAA/I,KAAAmJ,oBACAP,SAAA5I,KAAAoJ,cACAP,WAAA7I,KAAAsJ,gBACAvG,MAAA/C,KAAAiJ,cASAoT,EAAA1a,UAAAuC,SAAA,WACA,OAAAlE,KAAAgE,QAQAqY,EAAA1a,UAAA0H,WAAA,WACA,OAAArJ,KAAAsc,UAQAD,EAAA1a,UAAAuH,YAAA,WACA,OAAAlJ,KAAAuc,WAQAF,EAAA1a,UAAAwH,kBAAA,WACA,OAAAnJ,KAAAwc,iBAQAH,EAAA1a,UAAAyH,YAAA,WACA,OAAApJ,KAAAyc,WAQAJ,EAAA1a,UAAA2H,cAAA,WACA,OAAAtJ,KAAA0c,aAQAL,EAAA1a,UAAAsH,SAAA,WACA,OAAAjJ,KAAA2c,QASAN,EAAA1a,UAAAyC,SAAA,SAAAtB,GACA9C,KAAAgE,OAAAlB,EACA9C,KAAAiE,eAAA7D,GASAic,EAAA1a,UAAAib,WAAA,SAAAjU,GACA3I,KAAAsc,SAAA3T,EACA3I,KAAAiE,eAAA7D,GAeAic,EAAA1a,UAAA8J,YAAA,SAAA3C,GACA9I,KAAAuc,UAAAzT,EACA9I,KAAAiE,eAAA7D,GASAic,EAAA1a,UAAAkb,kBAAA,SAAA9T,GACA/I,KAAAwc,gBAAAzT,EACA/I,KAAAiE,eAAA7D,GASAic,EAAA1a,UAAAmb,YAAA,SAAAlU,GACA5I,KAAAyc,UAAA7T,EACA5I,KAAAiE,eAAA7D,GASAic,EAAA1a,UAAAob,cAAA,SAAAlU,GACA7I,KAAA0c,YAAA7T,EACA7I,KAAAiE,eAAA7D,GASAic,EAAA1a,UAAAqb,SAAA,SAAAja,GACA/C,KAAA2c,OAAA5Z,EACA/C,KAAAiE,eAAA7D,GAMAic,EAAA1a,UAAA0C,YAAA,WA2BA,YA1BAjE,IAAAJ,KAAAiE,YACAjE,KAAAiE,UAAA,IACAjE,KAAAgE,OACA,kBAAAhE,KAAAgE,OACAhE,KAAAiE,WAAAjE,KAAAgE,OAEAhE,KAAAiE,WAA0BzC,OAAAqC,EAAA,KAAArC,CAAMxB,KAAAgE,QAGhChE,KAAAiE,WAAA,IAEAjE,KAAAiE,WAAA,UACA7D,IAAAJ,KAAAsc,SACAtc,KAAAsc,SAAAvQ,WAAA,UACA/L,KAAAuc,UACAvc,KAAAuc,UAAAxQ,WAAA,eACA3L,IAAAJ,KAAAwc,gBACAxc,KAAAwc,gBAAA,eACApc,IAAAJ,KAAAyc,UACAzc,KAAAyc,UAAA,eACArc,IAAAJ,KAAA0c,YACA1c,KAAA0c,YAAA3Q,WAAA,eACA3L,IAAAJ,KAAA2c,OACA3c,KAAA2c,OAAA5Q,WAAA,MAGA/L,KAAAiE,WAGe7E,EAAA","file":"js/chunk-df7dfd62.757d3c4f.js","sourcesContent":["/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport {assert} from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State)}\n * RenderFunction\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nvar Style = function Style(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   */\n  this.geometry_ = null;\n\n  /**\n   * @private\n   * @type {!GeometryFunction}\n   */\n  this.geometryFunction_ = defaultGeometryFunction;\n\n  if (options.geometry !== undefined) {\n    this.setGeometry(options.geometry);\n  }\n\n  /**\n   * @private\n   * @type {import(\"./Fill.js\").default}\n   */\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n\n  /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n  this.image_ = options.image !== undefined ? options.image : null;\n\n  /**\n   * @private\n   * @type {RenderFunction|null}\n   */\n  this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n  /**\n   * @private\n   * @type {import(\"./Stroke.js\").default}\n   */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n   * @private\n   * @type {import(\"./Text.js\").default}\n   */\n  this.text_ = options.text !== undefined ? options.text : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.zIndex_ = options.zIndex;\n\n};\n\n/**\n * Clones the style.\n * @return {Style} The cloned style.\n * @api\n */\nStyle.prototype.clone = function clone () {\n  var geometry = this.getGeometry();\n  if (geometry && typeof geometry === 'object') {\n    geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry).clone();\n  }\n  return new Style({\n    geometry: geometry,\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    image: this.getImage() ? this.getImage().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    text: this.getText() ? this.getText().clone() : undefined,\n    zIndex: this.getZIndex()\n  });\n};\n\n/**\n * Get the custom renderer function that was configured with\n * {@link #setRenderer} or the `renderer` constructor option.\n * @return {RenderFunction|null} Custom renderer function.\n * @api\n */\nStyle.prototype.getRenderer = function getRenderer () {\n  return this.renderer_;\n};\n\n/**\n * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n * and `image` options of the style will be ignored.\n * @param {RenderFunction|null} renderer Custom renderer function.\n * @api\n */\nStyle.prototype.setRenderer = function setRenderer (renderer) {\n  this.renderer_ = renderer;\n};\n\n/**\n * Get the geometry to be rendered.\n * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n * Feature property or geometry or function that returns the geometry that will\n * be rendered with this style.\n * @api\n */\nStyle.prototype.getGeometry = function getGeometry () {\n  return this.geometry_;\n};\n\n/**\n * Get the function used to generate a geometry for rendering.\n * @return {!GeometryFunction} Function that is called with a feature\n * and returns the geometry to render instead of the feature's geometry.\n * @api\n */\nStyle.prototype.getGeometryFunction = function getGeometryFunction () {\n  return this.geometryFunction_;\n};\n\n/**\n * Get the fill style.\n * @return {import(\"./Fill.js\").default} Fill style.\n * @api\n */\nStyle.prototype.getFill = function getFill () {\n  return this.fill_;\n};\n\n/**\n * Set the fill style.\n * @param {import(\"./Fill.js\").default} fill Fill style.\n * @api\n */\nStyle.prototype.setFill = function setFill (fill) {\n  this.fill_ = fill;\n};\n\n/**\n * Get the image style.\n * @return {import(\"./Image.js\").default} Image style.\n * @api\n */\nStyle.prototype.getImage = function getImage () {\n  return this.image_;\n};\n\n/**\n * Set the image style.\n * @param {import(\"./Image.js\").default} image Image style.\n * @api\n */\nStyle.prototype.setImage = function setImage (image) {\n  this.image_ = image;\n};\n\n/**\n * Get the stroke style.\n * @return {import(\"./Stroke.js\").default} Stroke style.\n * @api\n */\nStyle.prototype.getStroke = function getStroke () {\n  return this.stroke_;\n};\n\n/**\n * Set the stroke style.\n * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n * @api\n */\nStyle.prototype.setStroke = function setStroke (stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n * Get the text style.\n * @return {import(\"./Text.js\").default} Text style.\n * @api\n */\nStyle.prototype.getText = function getText () {\n  return this.text_;\n};\n\n/**\n * Set the text style.\n * @param {import(\"./Text.js\").default} text Text style.\n * @api\n */\nStyle.prototype.setText = function setText (text) {\n  this.text_ = text;\n};\n\n/**\n * Get the z-index for the style.\n * @return {number|undefined} ZIndex.\n * @api\n */\nStyle.prototype.getZIndex = function getZIndex () {\n  return this.zIndex_;\n};\n\n/**\n * Set a geometry that is rendered instead of the feature's geometry.\n *\n * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n *   Feature property or geometry or function returning a geometry to render\n *   for this style.\n * @api\n */\nStyle.prototype.setGeometry = function setGeometry (geometry) {\n  if (typeof geometry === 'function') {\n    this.geometryFunction_ = geometry;\n  } else if (typeof geometry === 'string') {\n    this.geometryFunction_ = function(feature) {\n      return (\n        /** @type {import(\"../geom/Geometry.js\").default} */ (feature.get(geometry))\n      );\n    };\n  } else if (!geometry) {\n    this.geometryFunction_ = defaultGeometryFunction;\n  } else if (geometry !== undefined) {\n    this.geometryFunction_ = function() {\n      return (\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry)\n      );\n    };\n  }\n  this.geometry_ = geometry;\n};\n\n/**\n * Set the z-index.\n *\n * @param {number|undefined} zIndex ZIndex.\n * @api\n */\nStyle.prototype.setZIndex = function setZIndex (zIndex) {\n  this.zIndex_ = zIndex;\n};\n\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `Style` or an array of `Style`\n      var style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n\n/**\n * @type {Array<Style>}\n */\nvar defaultStyles = null;\n\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5\n        }),\n        fill: fill,\n        stroke: stroke\n      })\n    ];\n  }\n  return defaultStyles;\n}\n\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5]\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_POLYGON] =\n      styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2\n      })\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] =\n      styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING]\n      );\n\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2\n        })\n      }),\n      zIndex: Infinity\n    })\n  ];\n  styles[GeometryType.MULTI_POINT] =\n      styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING],\n        styles[GeometryType.POINT]\n      );\n\n  return styles;\n}\n\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n\n//# sourceMappingURL=Style.js.map","/**\n * @module ol/style/Fill\n */\nimport {getUid} from '../util.js';\nimport {asString} from '../color.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = function Fill(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n/**\n * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n * @return {Fill} The cloned style.\n * @api\n */\nFill.prototype.clone = function clone () {\n  var color = this.getColor();\n  return new Fill({\n    color: Array.isArray(color) ? color.slice() : color || undefined\n  });\n};\n\n/**\n * Get the fill color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\nFill.prototype.getColor = function getColor () {\n  return this.color_;\n};\n\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\nFill.prototype.setColor = function setColor (color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n/**\n * @return {string} The checksum.\n */\nFill.prototype.getChecksum = function getChecksum () {\n  if (this.checksum_ === undefined) {\n    var color = this.color_;\n    if (color) {\n      if (Array.isArray(color) || typeof color == 'string') {\n        this.checksum_ = 'f' + asString(/** @type {import(\"../color.js\").Color|string} */ (color));\n      } else {\n        this.checksum_ = getUid(this.color_);\n      }\n    } else {\n      this.checksum_ = 'f-';\n    }\n  }\n\n  return this.checksum_;\n};\n\nexport default Fill;\n\n//# sourceMappingURL=Fill.js.map","/**\n * @module ol/format/FormatType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ARRAY_BUFFER: 'arraybuffer',\n  JSON: 'json',\n  TEXT: 'text',\n  XML: 'xml'\n};\n\n//# sourceMappingURL=FormatType.js.map","/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./AtlasManager.js\").default} [atlasManager] The atlas manager to use for this circle.\n * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,\n * the circle is added to an atlas. By default no atlas manager is used.\n */\n\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nvar CircleStyle = /*@__PURE__*/(function (RegularShape) {\n  function CircleStyle(opt_options) {\n\n    var options = opt_options || /** @type {Options} */ ({});\n\n    RegularShape.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      atlasManager: options.atlasManager\n    });\n\n  }\n\n  if ( RegularShape ) CircleStyle.__proto__ = RegularShape;\n  CircleStyle.prototype = Object.create( RegularShape && RegularShape.prototype );\n  CircleStyle.prototype.constructor = CircleStyle;\n\n  /**\n  * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n  * @return {CircleStyle} The cloned style.\n  * @override\n  * @api\n  */\n  CircleStyle.prototype.clone = function clone () {\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n\n  /**\n  * Set the circle radius.\n  *\n  * @param {number} radius Circle radius.\n  * @api\n  */\n  CircleStyle.prototype.setRadius = function setRadius (radius) {\n    this.radius_ = radius;\n    this.render_(this.atlasManager_);\n  };\n\n  return CircleStyle;\n}(RegularShape));\n\n\nexport default CircleStyle;\n\n//# sourceMappingURL=Circle.js.map","/**\n * @module ol/style/RegularShape\n */\n\nimport {asString} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {CANVAS_LINE_DASH} from '../has.js';\nimport ImageState from '../ImageState.js';\nimport {defaultStrokeStyle, defaultFillStyle, defaultLineCap, defaultLineWidth, defaultLineJoin, defaultMiterLimit} from '../render/canvas.js';\nimport ImageStyle from './Image.js';\n\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {import(\"./AtlasManager.js\").default} [atlasManager] The atlas manager to use for this symbol. When\n * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the\n * symbol is added to an atlas. By default no atlas manager is used.\n */\n\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {string} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {string} lineJoin\n * @property {number} miterLimit\n */\n\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /*@__PURE__*/(function (ImageStyle) {\n  function RegularShape(options) {\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    ImageStyle.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1\n    });\n\n    /**\n     * @private\n     * @type {Array<string|number>}\n     */\n    this.checksums_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ = /** @type {number} */ (options.radius !== undefined ?\n      options.radius : options.radius1);\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.hitDetectionImageSize_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./AtlasManager.js\").default|undefined}\n     */\n    this.atlasManager_ = options.atlasManager;\n\n    this.render_(this.atlasManager_);\n\n  }\n\n  if ( ImageStyle ) RegularShape.__proto__ = ImageStyle;\n  RegularShape.prototype = Object.create( ImageStyle && ImageStyle.prototype );\n  RegularShape.prototype.constructor = RegularShape;\n\n  /**\n   * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  RegularShape.prototype.clone = function clone () {\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getAnchor = function getAnchor () {\n    return this.anchor_;\n  };\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  RegularShape.prototype.getAngle = function getAngle () {\n    return this.angle_;\n  };\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  RegularShape.prototype.getFill = function getFill () {\n    return this.fill_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {\n    return this.hitDetectionCanvas_;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getImage = function getImage (pixelRatio) {\n    return this.canvas_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getImageSize = function getImageSize () {\n    return this.imageSize_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {\n    return this.hitDetectionImageSize_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getImageState = function getImageState () {\n    return ImageState.LOADED;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getOrigin = function getOrigin () {\n    return this.origin_;\n  };\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  RegularShape.prototype.getPoints = function getPoints () {\n    return this.points_;\n  };\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  RegularShape.prototype.getRadius = function getRadius () {\n    return this.radius_;\n  };\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  RegularShape.prototype.getRadius2 = function getRadius2 () {\n    return this.radius2_;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getSize = function getSize () {\n    return this.size_;\n  };\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  RegularShape.prototype.getStroke = function getStroke () {\n    return this.stroke_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.listenImageChange = function listenImageChange (listener, thisArg) {\n    return undefined;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.load = function load () {};\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {};\n\n  /**\n   * @protected\n   * @param {import(\"./AtlasManager.js\").default|undefined} atlasManager An atlas manager.\n   */\n  RegularShape.prototype.render_ = function render_ (atlasManager) {\n    var imageSize;\n    var lineCap = '';\n    var lineJoin = '';\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      if (!CANVAS_LINE_DASH) {\n        lineDash = null;\n        lineDashOffset = 0;\n      }\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var size = 2 * (this.radius_ + strokeWidth) + 1;\n\n    /** @type {RenderOptions} */\n    var renderOptions = {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n\n    if (atlasManager === undefined) {\n      // no atlas manager is used, create a new canvas\n      var context = createCanvasContext2D(size, size);\n      this.canvas_ = context.canvas;\n\n      // canvas.width and height are rounded to the closest integer\n      size = this.canvas_.width;\n      imageSize = size;\n\n      this.draw_(renderOptions, context, 0, 0);\n\n      this.createHitDetectionCanvas_(renderOptions);\n    } else {\n      // an atlas manager is used, add the symbol to an atlas\n      size = Math.round(size);\n\n      var hasCustomHitDetectionImage = !this.fill_;\n      var renderHitDetectionCallback;\n      if (hasCustomHitDetectionImage) {\n        // render the hit-detection image into a separate atlas image\n        renderHitDetectionCallback =\n            this.drawHitDetectionCanvas_.bind(this, renderOptions);\n      }\n\n      var id = this.getChecksum();\n      var info = atlasManager.add(\n        id, size, size, this.draw_.bind(this, renderOptions),\n        renderHitDetectionCallback);\n\n      this.canvas_ = info.image;\n      this.origin_ = [info.offsetX, info.offsetY];\n      imageSize = info.image.width;\n\n      if (hasCustomHitDetectionImage) {\n        this.hitDetectionCanvas_ = info.hitImage;\n        this.hitDetectionImageSize_ =\n            [info.hitImage.width, info.hitImage.height];\n      } else {\n        this.hitDetectionCanvas_ = this.canvas_;\n        this.hitDetectionImageSize_ = [imageSize, imageSize];\n      }\n    }\n\n    this.anchor_ = [size / 2, size / 2];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  };\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  RegularShape.prototype.draw_ = function draw_ (renderOptions, context, x, y) {\n    var i, angle0, radiusC;\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = /** @type {CanvasLineCap} */ (renderOptions.lineCap);\n      context.lineJoin = /** @type {CanvasLineJoin} */ (renderOptions.lineJoin);\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n    context.closePath();\n  };\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  RegularShape.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_ (renderOptions) {\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n    if (this.fill_) {\n      this.hitDetectionCanvas_ = this.canvas_;\n      return;\n    }\n\n    // if no fill style is set, create an extra hit-detection image with a\n    // default fill style\n    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.hitDetectionCanvas_ = context.canvas;\n\n    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n  };\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  RegularShape.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_ (renderOptions, context, x, y) {\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      var i, radiusC, angle0;\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    context.fillStyle = asString(defaultFillStyle);\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.stroke();\n    }\n    context.closePath();\n  };\n\n  /**\n   * @return {string} The checksum.\n   */\n  RegularShape.prototype.getChecksum = function getChecksum () {\n    var strokeChecksum = this.stroke_ ?\n      this.stroke_.getChecksum() : '-';\n    var fillChecksum = this.fill_ ?\n      this.fill_.getChecksum() : '-';\n\n    var recalculate = !this.checksums_ ||\n        (strokeChecksum != this.checksums_[1] ||\n        fillChecksum != this.checksums_[2] ||\n        this.radius_ != this.checksums_[3] ||\n        this.radius2_ != this.checksums_[4] ||\n        this.angle_ != this.checksums_[5] ||\n        this.points_ != this.checksums_[6]);\n\n    if (recalculate) {\n      var checksum = 'r' + strokeChecksum + fillChecksum +\n          (this.radius_ !== undefined ? this.radius_.toString() : '-') +\n          (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +\n          (this.angle_ !== undefined ? this.angle_.toString() : '-') +\n          (this.points_ !== undefined ? this.points_.toString() : '-');\n      this.checksums_ = [checksum, strokeChecksum, fillChecksum,\n        this.radius_, this.radius2_, this.angle_, this.points_];\n    }\n\n    return /** @type {string} */ (this.checksums_[0]);\n  };\n\n  return RegularShape;\n}(ImageStyle));\n\n\nexport default RegularShape;\n\n//# sourceMappingURL=RegularShape.js.map","/**\n * @module ol/style/Image\n */\nimport {abstract} from '../util.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity\n * @property {boolean} rotateWithView\n * @property {number} rotation\n * @property {number} scale\n */\n\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = function ImageStyle(options) {\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.opacity_ = options.opacity;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.rotateWithView_ = options.rotateWithView;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.rotation_ = options.rotation;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.scale_ = options.scale;\n\n};\n\n/**\n * Clones the style.\n * @return {ImageStyle} The cloned style.\n * @api\n */\nImageStyle.prototype.clone = function clone () {\n  return new ImageStyle({\n    opacity: this.getOpacity(),\n    scale: this.getScale(),\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView()\n  });\n};\n\n/**\n * Get the symbolizer opacity.\n * @return {number} Opacity.\n * @api\n */\nImageStyle.prototype.getOpacity = function getOpacity () {\n  return this.opacity_;\n};\n\n/**\n * Determine whether the symbolizer rotates with the map.\n * @return {boolean} Rotate with map.\n * @api\n */\nImageStyle.prototype.getRotateWithView = function getRotateWithView () {\n  return this.rotateWithView_;\n};\n\n/**\n * Get the symoblizer rotation.\n * @return {number} Rotation.\n * @api\n */\nImageStyle.prototype.getRotation = function getRotation () {\n  return this.rotation_;\n};\n\n/**\n * Get the symbolizer scale.\n * @return {number} Scale.\n * @api\n */\nImageStyle.prototype.getScale = function getScale () {\n  return this.scale_;\n};\n\n/**\n * This method is deprecated and always returns false.\n * @return {boolean} false.\n * @deprecated\n * @api\n */\nImageStyle.prototype.getSnapToPixel = function getSnapToPixel () {\n  return false;\n};\n\n/**\n * Get the anchor point in pixels. The anchor determines the center point for the\n * symbolizer.\n * @abstract\n * @return {Array<number>} Anchor.\n */\nImageStyle.prototype.getAnchor = function getAnchor () {\n  return abstract();\n};\n\n/**\n * Get the image element for the symbolizer.\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n */\nImageStyle.prototype.getImage = function getImage (pixelRatio) {\n  return abstract();\n};\n\n/**\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n */\nImageStyle.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {\n  return abstract();\n};\n\n/**\n * @abstract\n * @return {import(\"../ImageState.js\").default} Image state.\n */\nImageStyle.prototype.getImageState = function getImageState () {\n  return abstract();\n};\n\n/**\n * @abstract\n * @return {import(\"../size.js\").Size} Image size.\n */\nImageStyle.prototype.getImageSize = function getImageSize () {\n  return abstract();\n};\n\n/**\n * @abstract\n * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n */\nImageStyle.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {\n  return abstract();\n};\n\n/**\n * Get the origin of the symbolizer.\n * @abstract\n * @return {Array<number>} Origin.\n */\nImageStyle.prototype.getOrigin = function getOrigin () {\n  return abstract();\n};\n\n/**\n * Get the size of the symbolizer (in pixels).\n * @abstract\n * @return {import(\"../size.js\").Size} Size.\n */\nImageStyle.prototype.getSize = function getSize () {\n  return abstract();\n};\n\n/**\n * Set the opacity.\n *\n * @param {number} opacity Opacity.\n * @api\n */\nImageStyle.prototype.setOpacity = function setOpacity (opacity) {\n  this.opacity_ = opacity;\n};\n\n/**\n * Set whether to rotate the style with the view.\n *\n * @param {boolean} rotateWithView Rotate with map.\n * @api\n */\nImageStyle.prototype.setRotateWithView = function setRotateWithView (rotateWithView) {\n  this.rotateWithView_ = rotateWithView;\n};\n\n/**\n * Set the rotation.\n *\n * @param {number} rotation Rotation.\n * @api\n */\nImageStyle.prototype.setRotation = function setRotation (rotation) {\n  this.rotation_ = rotation;\n};\n/**\n * Set the scale.\n *\n * @param {number} scale Scale.\n * @api\n */\nImageStyle.prototype.setScale = function setScale (scale) {\n  this.scale_ = scale;\n};\n\n/**\n * This method is deprecated and does nothing.\n * @param {boolean} snapToPixel Snap to pixel?\n * @deprecated\n * @api\n */\nImageStyle.prototype.setSnapToPixel = function setSnapToPixel (snapToPixel) {};\n\n/**\n * @abstract\n * @param {function(this: T, import(\"../events/Event.js\").default)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {import(\"../events.js\").EventsKey|undefined} Listener key.\n * @template T\n */\nImageStyle.prototype.listenImageChange = function listenImageChange (listener, thisArg) {\n  return abstract();\n};\n\n/**\n * Load not yet loaded URI.\n * @abstract\n */\nImageStyle.prototype.load = function load () {\n  abstract();\n};\n\n/**\n * @abstract\n * @param {function(this: T, import(\"../events/Event.js\").default)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @template T\n */\nImageStyle.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {\n  abstract();\n};\n\nexport default ImageStyle;\n\n//# sourceMappingURL=Image.js.map","/**\n * @module ol/Feature\n */\nimport {assert} from './asserts.js';\nimport {listen, unlisten, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\nvar Feature = /*@__PURE__*/(function (BaseObject) {\n  function Feature(opt_geometryOrProperties) {\n\n    BaseObject.call(this);\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n\n    if (opt_geometryOrProperties) {\n      if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {\n        var geometry = /** @type {import(\"./geom/Geometry.js\").default} */ (opt_geometryOrProperties);\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        var properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  if ( BaseObject ) Feature.__proto__ = BaseObject;\n  Feature.prototype = Object.create( BaseObject && BaseObject.prototype );\n  Feature.prototype.constructor = Feature;\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature} The clone.\n   * @api\n   */\n  Feature.prototype.clone = function clone () {\n    var clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    var style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  };\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {import(\"./geom/Geometry.js\").default|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  Feature.prototype.getGeometry = function getGeometry () {\n    return (\n      /** @type {import(\"./geom/Geometry.js\").default|undefined} */ (this.get(this.geometryName_))\n    );\n  };\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Feature.prototype.getId = function getId () {\n    return this.id_;\n  };\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  Feature.prototype.getGeometryName = function getGeometryName () {\n    return this.geometryName_;\n  };\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike} The feature style.\n   * @api\n   */\n  Feature.prototype.getStyle = function getStyle () {\n    return this.style_;\n  };\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  Feature.prototype.getStyleFunction = function getStyleFunction () {\n    return this.styleFunction_;\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChange_ = function handleGeometryChange_ () {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChanged_ = function handleGeometryChanged_ () {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    var geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry,\n        EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {import(\"./geom/Geometry.js\").default|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  Feature.prototype.setGeometry = function setGeometry (geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {import(\"./style/Style.js\").StyleLike} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setStyle = function setStyle (style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  };\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setId = function setId (id) {\n    this.id_ = id;\n    this.changed();\n  };\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  Feature.prototype.setGeometryName = function setGeometryName (name) {\n    unlisten(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  };\n\n  return Feature;\n}(BaseObject));\n\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      var style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n      styles = [style];\n    }\n    return function() {\n      return styles;\n    };\n  }\n}\nexport default Feature;\n\n//# sourceMappingURL=Feature.js.map","/**\n * @module ol/featureloader\n */\nimport {VOID} from './functions.js';\nimport FormatType from './format/FormatType.js';\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default), import(\"./extent.js\").Extent, number,\n *                    import(\"./proj/Projection.js\").default)} FeatureLoader\n * @api\n */\n\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {function(this:import(\"./VectorTile.js\").default, Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default, import(\"./extent.js\").Extent)|function(this:import(\"./source/Vector\").default, Array<import(\"./Feature.js\").default>)} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:import(\"./VectorTile.js\").default)|function(this:import(\"./source/Vector\").default)} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function(extent, resolution, projection) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET',\n        typeof url === 'function' ? url(extent, resolution, projection) : url,\n        true);\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function(event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          var type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          var source;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */ (xhr.response);\n          }\n          if (source) {\n            success.call(this, format.readFeatures(source,\n              {featureProjection: projection}),\n            format.readProjection(source), format.getLastExtent());\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function() {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function(features, dataProjection) {\n      var sourceOrTile = /** @type {?} */ (this);\n      if (typeof sourceOrTile.addFeatures === 'function') {\n        /** @type {import(\"./source/Vector\").default} */ (sourceOrTile).addFeatures(features);\n      }\n    }, /* FIXME handle error */ VOID);\n}\n\n//# sourceMappingURL=featureloader.js.map","/**\n * @module ol/loadingstrategy\n */\n\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function(extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      var tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n\n//# sourceMappingURL=loadingstrategy.js.map","/**\n * @module ol/source/VectorEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a feature is added to the source.\n   * @event ol/source/Vector.VectorSourceEvent#addfeature\n   * @api\n   */\n  ADDFEATURE: 'addfeature',\n\n  /**\n   * Triggered when a feature is updated.\n   * @event ol/source/Vector.VectorSourceEvent#changefeature\n   * @api\n   */\n  CHANGEFEATURE: 'changefeature',\n\n  /**\n   * Triggered when the clear method is called on the source.\n   * @event ol/source/Vector.VectorSourceEvent#clear\n   * @api\n   */\n  CLEAR: 'clear',\n\n  /**\n   * Triggered when a feature is removed from the source.\n   * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.\n   * @event ol/source/Vector.VectorSourceEvent#removefeature\n   * @api\n   */\n  REMOVEFEATURE: 'removefeature'\n};\n\n//# sourceMappingURL=VectorEventType.js.map","/**\n * @module ol/structs/RBush\n */\nimport {getUid} from '../util.js';\nimport rbush from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = function RBush(opt_maxEntries) {\n\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object<string, Entry>}\n   */\n  this.items_ = {};\n\n};\n\n/**\n * Insert a value into the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.insert = function insert (extent, value) {\n  /** @type {Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n\n\n/**\n * Bulk-insert values into the RBush.\n * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n * @param {Array<T>} values Values.\n */\nRBush.prototype.load = function load (extents, values) {\n  var items = new Array(values.length);\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[getUid(value)] = item;\n  }\n  this.rbush_.load(items);\n};\n\n\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\nRBush.prototype.remove = function remove (value) {\n  var uid = getUid(value);\n\n  // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n\n\n/**\n * Update the extent of a value in the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.update = function update (extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n\n\n/**\n * Return all values in the RBush.\n * @return {Array<T>} All.\n */\nRBush.prototype.getAll = function getAll () {\n  var items = this.rbush_.all();\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Return all values in the given extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @return {Array<T>} All in extent.\n */\nRBush.prototype.getInExtent = function getInExtent (extent) {\n  /** @type {Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach = function forEach (callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n\n\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEachInExtent = function forEachInExtent (extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n\n\n/**\n * @param {Array<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach_ = function forEach_ (values, callback, opt_this) {\n  var result;\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return result;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nRBush.prototype.isEmpty = function isEmpty$1 () {\n  return isEmpty(this.items_);\n};\n\n\n/**\n * Remove all values from the RBush.\n */\nRBush.prototype.clear = function clear () {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n\n\n/**\n * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n * @return {import(\"../extent.js\").Extent} Extent.\n */\nRBush.prototype.getExtent = function getExtent (opt_extent) {\n  var data = this.rbush_.toJSON();\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n\n\n/**\n * @param {RBush} rbush R-Tree.\n */\nRBush.prototype.concat = function concat (rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n  for (var i in rbush.items_) {\n    this.items_[i] = rbush.items_[i];\n  }\n};\n\n\nexport default RBush;\n\n//# sourceMappingURL=RBush.js.map","/**\n * @module ol/source/Vector\n */\n\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {extend} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {xhr} from '../featureloader.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {isEmpty, getValues} from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport var VectorSourceEvent = /*@__PURE__*/(function (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n\n    Event.call(this, type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n  }\n\n  if ( Event ) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create( Event && Event.prototype );\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n\n  return VectorSourceEvent;\n}(Event));\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nvar VectorSource = /*@__PURE__*/(function (Source) {\n  function VectorSource(opt_options) {\n\n    var options = opt_options || {};\n\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */ (this.format_));\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n\n    var useSpatialIndex =\n        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n\n    var collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n\n  }\n\n  if ( Source ) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create( Source && Source.prototype );\n  VectorSource.prototype.constructor = VectorSource;\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  VectorSource.prototype.addFeature = function addFeature (feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.addFeatureInternal = function addFeatureInternal (feature) {\n    var featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  VectorSource.prototype.setupChangeEvents_ = function setupChangeEvents_ (featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE,\n        this.handleFeatureChange_, this),\n      listen(feature, ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_, this)\n    ];\n  };\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  VectorSource.prototype.addToIndex_ = function addToIndex_ (featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_),\n        30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  };\n\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  VectorSource.prototype.addFeatures = function addFeatures (features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  VectorSource.prototype.addFeaturesInternal = function addFeaturesInternal (features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n\n    for (var i = 0, length = features.length; i < length; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n      var feature$1 = newFeatures[i$1];\n      var featureKey$1 = getUid(feature$1);\n      this.setupChangeEvents_(featureKey$1, feature$1);\n\n      var geometry = feature$1.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature$1);\n      } else {\n        this.nullGeometryFeatures_[featureKey$1] = feature$1;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n    }\n  };\n\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  VectorSource.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_ (collection) {\n    var modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(this, VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(collection, CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    listen(collection, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    this.featuresCollection_ = collection;\n  };\n\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  VectorSource.prototype.clear = function clear (opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeature = function forEachFeature (callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect (coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function(feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureInExtent = function forEachFeatureInExtent (extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent (extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function(feature) {\n        var geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          var result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      });\n  };\n\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesCollection = function getFeaturesCollection () {\n    return this.featuresCollection_;\n  };\n\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeatures = function getFeatures () {\n    var features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (\n      /** @type {Array<import(\"../Feature.js\").default>} */ (features)\n    );\n  };\n\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate (coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesInExtent = function getFeaturesInExtent (extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  };\n\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  VectorSource.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate (coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       */\n      function(feature) {\n        if (filter(feature)) {\n          var geometry = feature.getGeometry();\n          var previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            var minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      });\n    return closestFeature;\n  };\n\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  VectorSource.prototype.getExtent = function getExtent (opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  VectorSource.prototype.getFeatureById = function getFeatureById (id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  VectorSource.prototype.getFormat = function getFormat () {\n    return this.format_;\n  };\n\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorSource.prototype.getOverlaps = function getOverlaps () {\n    return this.overlaps_;\n  };\n\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  VectorSource.prototype.getUrl = function getUrl () {\n    return this.url_;\n  };\n\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  VectorSource.prototype.handleFeatureChange_ = function handleFeatureChange_ (event) {\n    var feature = /** @type {import(\"../Feature.js\").default} */ (event.target);\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    var id = feature.getId();\n    if (id !== undefined) {\n      var sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.CHANGEFEATURE, feature));\n  };\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  VectorSource.prototype.hasFeature = function hasFeature (feature) {\n    var id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  };\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  VectorSource.prototype.isEmpty = function isEmpty$1 () {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorSource.prototype.loadFeatures = function loadFeatures (extent, resolution, projection) {\n    var this$1 = this;\n\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    var loop = function ( i, ii ) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function(object) {\n          return containsExtent(object.extent, extentToLoad);\n        });\n      if (!alreadyLoaded) {\n        this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n        this$1.loading = this$1.loader_ !== VOID;\n      }\n    };\n\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop( i, ii );\n  };\n\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  VectorSource.prototype.removeLoadedExtent = function removeLoadedExtent (extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function(object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  VectorSource.prototype.removeFeature = function removeFeature (feature) {\n    var featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.removeFeatureInternal = function removeFeatureInternal (feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.REMOVEFEATURE, feature));\n  };\n\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  VectorSource.prototype.removeFromIdIndex_ = function removeFromIdIndex_ (feature) {\n    var removed = false;\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  };\n\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  VectorSource.prototype.setLoader = function setLoader (loader) {\n    this.loader_ = loader;\n  };\n\n  return VectorSource;\n}(Source));\n\n\nexport default VectorSource;\n\n//# sourceMappingURL=Vector.js.map","/**\n * @module ol/layer/Vector\n */\nimport LayerType from '../LayerType.js';\nimport Layer from './Layer.js';\nimport VectorRenderType from './VectorRenderType.js';\nimport {assign} from '../obj.js';\nimport {createDefaultStyle, toFunction as toStyleFunction} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {import(\"./VectorRenderType.js\").default|string} [renderMode='vector'] Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\n *    animations, but slower performance.\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles, and the priority is defined by the z-index of the style. Lower z-index\n * means higher priority.\n * @property {import(\"../style/Style.js\").StyleLike} [style] Layer style. See\n * {@link module:ol/style} for default style which will be used if this is not defined.\n * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during animations. This means that no\n * vectors will be shown clipped, but the setting will have a performance impact for large\n * amounts of vector data. When set to `false`, batches will be recreated when no animation\n * is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during interactions. See also\n * `updateWhileAnimating`.\n */\n\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nvar VectorLayer = /*@__PURE__*/(function (Layer) {\n  function VectorLayer(opt_options) {\n    var options = opt_options ?\n      opt_options : /** @type {Options} */ ({});\n\n    var baseOptions = assign({}, options);\n\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    Layer.call(this, baseOptions);\n\n    /**\n    * @private\n    * @type {boolean}\n    */\n    this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n\n    /**\n    * @type {number}\n    * @private\n    */\n    this.renderBuffer_ = options.renderBuffer !== undefined ?\n      options.renderBuffer : 100;\n\n    /**\n    * User provided style.\n    * @type {import(\"../style/Style.js\").StyleLike}\n    * @private\n    */\n    this.style_ = null;\n\n    /**\n    * Style function for use within the library.\n    * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n    * @private\n    */\n    this.styleFunction_ = undefined;\n\n    this.setStyle(options.style);\n\n    /**\n    * @type {boolean}\n    * @private\n    */\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?\n      options.updateWhileAnimating : false;\n\n    /**\n    * @type {boolean}\n    * @private\n    */\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?\n      options.updateWhileInteracting : false;\n\n    /**\n    * @private\n    * @type {import(\"./VectorTileRenderType.js\").default|string}\n    */\n    this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;\n\n    /**\n    * The layer type.\n    * @protected\n    * @type {import(\"../LayerType.js\").default}\n    */\n    this.type = LayerType.VECTOR;\n\n  }\n\n  if ( Layer ) VectorLayer.__proto__ = Layer;\n  VectorLayer.prototype = Object.create( Layer && Layer.prototype );\n  VectorLayer.prototype.constructor = VectorLayer;\n\n  /**\n  * @return {boolean} Declutter.\n  */\n  VectorLayer.prototype.getDeclutter = function getDeclutter () {\n    return this.declutter_;\n  };\n\n  /**\n  * @param {boolean} declutter Declutter.\n  */\n  VectorLayer.prototype.setDeclutter = function setDeclutter (declutter) {\n    this.declutter_ = declutter;\n  };\n\n  /**\n  * @return {number|undefined} Render buffer.\n  */\n  VectorLayer.prototype.getRenderBuffer = function getRenderBuffer () {\n    return this.renderBuffer_;\n  };\n\n  /**\n  * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n  *     order.\n  */\n  VectorLayer.prototype.getRenderOrder = function getRenderOrder () {\n    return (\n    /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (this.get(Property.RENDER_ORDER))\n    );\n  };\n\n  /**\n  * Get the style for features.  This returns whatever was passed to the `style`\n  * option at construction or to the `setStyle` method.\n  * @return {import(\"../style/Style.js\").StyleLike}\n  *     Layer style.\n  * @api\n  */\n  VectorLayer.prototype.getStyle = function getStyle () {\n    return this.style_;\n  };\n\n  /**\n  * Get the style function.\n  * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n  * @api\n  */\n  VectorLayer.prototype.getStyleFunction = function getStyleFunction () {\n    return this.styleFunction_;\n  };\n\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     animating.\n  */\n  VectorLayer.prototype.getUpdateWhileAnimating = function getUpdateWhileAnimating () {\n    return this.updateWhileAnimating_;\n  };\n\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     interacting.\n  */\n  VectorLayer.prototype.getUpdateWhileInteracting = function getUpdateWhileInteracting () {\n    return this.updateWhileInteracting_;\n  };\n\n  /**\n  * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n  *     Render order.\n  */\n  VectorLayer.prototype.setRenderOrder = function setRenderOrder (renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  };\n\n  /**\n  * Set the style for features.  This can be a single style object, an array\n  * of styles, or a function that takes a feature and resolution and returns\n  * an array of styles. If it is `undefined` the default style is used. If\n  * it is `null` the layer has no style (a `null` style), so only features\n  * that have their own styles will be rendered in the layer. See\n  * {@link module:ol/style} for information on the default style.\n  * @param {import(\"../style/Style.js\").default|Array<import(\"../style/Style.js\").default>|import(\"../style/Style.js\").StyleFunction|null|undefined} style Layer style.\n  * @api\n  */\n  VectorLayer.prototype.setStyle = function setStyle (style) {\n    this.style_ = style !== undefined ? style : createDefaultStyle;\n    this.styleFunction_ = style === null ?\n      undefined : toStyleFunction(this.style_);\n    this.changed();\n  };\n\n  /**\n  * @return {import(\"./VectorRenderType.js\").default|string} The render mode.\n  */\n  VectorLayer.prototype.getRenderMode = function getRenderMode () {\n    return this.renderMode_;\n  };\n\n  return VectorLayer;\n}(Layer));\n\n\n/**\n * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.\n * @function\n * @return {import(\"../source/Vector.js\").default} Source.\n * @api\n */\nVectorLayer.prototype.getSource;\n\n\nexport default VectorLayer;\n\n//# sourceMappingURL=Vector.js.map","/**\n * @module ol/style/Stroke\n */\nimport {getUid} from '../util.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nvar Stroke = function Stroke(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.lineCap_ = options.lineCap;\n\n  /**\n   * @private\n   * @type {Array<number>}\n   */\n  this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.lineDashOffset_ = options.lineDashOffset;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.lineJoin_ = options.lineJoin;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.miterLimit_ = options.miterLimit;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.width_ = options.width;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n/**\n * Clones the style.\n * @return {Stroke} The cloned style.\n * @api\n */\nStroke.prototype.clone = function clone () {\n  var color = this.getColor();\n  return new Stroke({\n    color: Array.isArray(color) ? color.slice() : color || undefined,\n    lineCap: this.getLineCap(),\n    lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n    lineDashOffset: this.getLineDashOffset(),\n    lineJoin: this.getLineJoin(),\n    miterLimit: this.getMiterLimit(),\n    width: this.getWidth()\n  });\n};\n\n/**\n * Get the stroke color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\nStroke.prototype.getColor = function getColor () {\n  return this.color_;\n};\n\n/**\n * Get the line cap type for the stroke.\n * @return {string|undefined} Line cap.\n * @api\n */\nStroke.prototype.getLineCap = function getLineCap () {\n  return this.lineCap_;\n};\n\n/**\n * Get the line dash style for the stroke.\n * @return {Array<number>} Line dash.\n * @api\n */\nStroke.prototype.getLineDash = function getLineDash () {\n  return this.lineDash_;\n};\n\n/**\n * Get the line dash offset for the stroke.\n * @return {number|undefined} Line dash offset.\n * @api\n */\nStroke.prototype.getLineDashOffset = function getLineDashOffset () {\n  return this.lineDashOffset_;\n};\n\n/**\n * Get the line join type for the stroke.\n * @return {string|undefined} Line join.\n * @api\n */\nStroke.prototype.getLineJoin = function getLineJoin () {\n  return this.lineJoin_;\n};\n\n/**\n * Get the miter limit for the stroke.\n * @return {number|undefined} Miter limit.\n * @api\n */\nStroke.prototype.getMiterLimit = function getMiterLimit () {\n  return this.miterLimit_;\n};\n\n/**\n * Get the stroke width.\n * @return {number|undefined} Width.\n * @api\n */\nStroke.prototype.getWidth = function getWidth () {\n  return this.width_;\n};\n\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\nStroke.prototype.setColor = function setColor (color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line cap.\n *\n * @param {string|undefined} lineCap Line cap.\n * @api\n */\nStroke.prototype.setLineCap = function setLineCap (lineCap) {\n  this.lineCap_ = lineCap;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line dash.\n *\n * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n * property will have no visual effect in these browsers.\n *\n * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n *\n * @param {Array<number>} lineDash Line dash.\n * @api\n */\nStroke.prototype.setLineDash = function setLineDash (lineDash) {\n  this.lineDash_ = lineDash;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line dash offset.\n *\n * @param {number|undefined} lineDashOffset Line dash offset.\n * @api\n */\nStroke.prototype.setLineDashOffset = function setLineDashOffset (lineDashOffset) {\n  this.lineDashOffset_ = lineDashOffset;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line join.\n *\n * @param {string|undefined} lineJoin Line join.\n * @api\n */\nStroke.prototype.setLineJoin = function setLineJoin (lineJoin) {\n  this.lineJoin_ = lineJoin;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the miter limit.\n *\n * @param {number|undefined} miterLimit Miter limit.\n * @api\n */\nStroke.prototype.setMiterLimit = function setMiterLimit (miterLimit) {\n  this.miterLimit_ = miterLimit;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the width.\n *\n * @param {number|undefined} width Width.\n * @api\n */\nStroke.prototype.setWidth = function setWidth (width) {\n  this.width_ = width;\n  this.checksum_ = undefined;\n};\n\n/**\n * @return {string} The checksum.\n */\nStroke.prototype.getChecksum = function getChecksum () {\n  if (this.checksum_ === undefined) {\n    this.checksum_ = 's';\n    if (this.color_) {\n      if (typeof this.color_ === 'string') {\n        this.checksum_ += this.color_;\n      } else {\n        this.checksum_ += getUid(this.color_);\n      }\n    } else {\n      this.checksum_ += '-';\n    }\n    this.checksum_ += ',' +\n        (this.lineCap_ !== undefined ?\n          this.lineCap_.toString() : '-') + ',' +\n        (this.lineDash_ ?\n          this.lineDash_.toString() : '-') + ',' +\n        (this.lineDashOffset_ !== undefined ?\n          this.lineDashOffset_ : '-') + ',' +\n        (this.lineJoin_ !== undefined ?\n          this.lineJoin_ : '-') + ',' +\n        (this.miterLimit_ !== undefined ?\n          this.miterLimit_.toString() : '-') + ',' +\n        (this.width_ !== undefined ?\n          this.width_.toString() : '-');\n  }\n\n  return this.checksum_;\n};\n\nexport default Stroke;\n\n//# sourceMappingURL=Stroke.js.map"],"sourceRoot":""}