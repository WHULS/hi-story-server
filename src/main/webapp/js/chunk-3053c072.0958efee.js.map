{"version":3,"sources":["webpack:///./node_modules/_ol@5.3.1@ol/style/IconAnchorUnits.js","webpack:///./node_modules/_ol@5.3.1@ol/style/IconImage.js","webpack:///./node_modules/_ol@5.3.1@ol/style/IconOrigin.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Icon.js","webpack:///./node_modules/_ol@5.3.1@ol/style/Text.js"],"names":["IconAnchorUnits","FRACTION","PIXELS","IconImage_IconImage","EventTarget","IconImage","image","src","size","crossOrigin","imageState","color","call","this","hitDetectionImage_","image_","Image","canvas_","document","createElement","color_","imageListenerKeys_","imageState_","size_","src_","tainted_","__proto__","prototype","Object","create","constructor","isTainted_","undefined","ImageState","LOADED","context","dom","drawImage","getImageData","e","dispatchChangeEvent_","dispatchEvent","EventType","CHANGE","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","width","height","replaceColor_","getImage","pixelRatio","getImageState","getHitDetectionImage","fillRect","canvas","getSize","getSrc","load","IDLE","LOADING","events","LOAD","ctx","getContext","imgData","data","r","g","b","i","ii","length","putImageData","forEach","Target","get","iconImage","IconImageCache","set","IconOrigin","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","Icon_Icon","ImageStyle","Icon","opt_options","options","opacity","rotation","scale","rotateWithView","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","img","imgSize","asserts","util","_ol_5_3_1_ol_color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","clone","slice","getOpacity","getScale","getRotation","getRotateWithView","getAnchor","setAnchor","getColor","getImageSize","getHitDetectionImageSize","getOrigin","iconImageSize","listenImageChange","listener","thisArg","unlistenImageChange","style_Image","__webpack_exports__","_Fill_js__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_TextPlacement_js__WEBPACK_IMPORTED_MODULE_1__","DEFAULT_FILL_COLOR","Text","font_","font","rotation_","rotateWithView_","scale_","text_","text","textAlign_","textAlign","textBaseline_","textBaseline","fill_","fill","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","getFont","getPlacement","getMaxAngle","getOverflow","getText","getTextAlign","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"mappings":"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","file":"js/chunk-3053c072.0958efee.js","sourcesContent":["/**\n * @module ol/style/IconAnchorUnits\n */\n\n/**\n * Icon anchor units. One of 'fraction', 'pixels'.\n * @enum {string}\n */\nexport default {\n  FRACTION: 'fraction',\n  PIXELS: 'pixels'\n};\n\n//# sourceMappingURL=IconAnchorUnits.js.map","/**\n * @module ol/style/IconImage\n */\n\nimport {createCanvasContext2D} from '../dom.js';\nimport {listenOnce, unlistenByKey} from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\n\nvar IconImage = /*@__PURE__*/(function (EventTarget) {\n  function IconImage(image, src, size, crossOrigin, imageState, color) {\n\n    EventTarget.call(this);\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = !image ? new Image() : image;\n\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = color ?\n      /** @type {HTMLCanvasElement} */ (document.createElement('canvas')) :\n      null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.tainted_;\n\n  }\n\n  if ( EventTarget ) IconImage.__proto__ = EventTarget;\n  IconImage.prototype = Object.create( EventTarget && EventTarget.prototype );\n  IconImage.prototype.constructor = IconImage;\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  IconImage.prototype.isTainted_ = function isTainted_ () {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      this.tainted_ = false;\n      var context = createCanvasContext2D(1, 1);\n      try {\n        context.drawImage(this.image_, 0, 0);\n        context.getImageData(0, 0, 1, 1);\n      } catch (e) {\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.dispatchChangeEvent_ = function dispatchChangeEvent_ () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageError_ = function handleImageError_ () {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageLoad_ = function handleImageLoad_ () {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    }\n    this.size_ = [this.image_.width, this.image_.height];\n    this.unlistenImage_();\n    this.replaceColor_();\n    this.dispatchChangeEvent_();\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  IconImage.prototype.getImage = function getImage (pixelRatio) {\n    return this.canvas_ ? this.canvas_ : this.image_;\n  };\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  IconImage.prototype.getImageState = function getImageState () {\n    return this.imageState_;\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  IconImage.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        var width = this.size_[0];\n        var height = this.size_[1];\n        var context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  };\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  IconImage.prototype.getSize = function getSize () {\n    return this.size_;\n  };\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  IconImage.prototype.getSrc = function getSrc () {\n    return this.src_;\n  };\n\n  /**\n   * Load not yet loaded URI.\n   */\n  IconImage.prototype.load = function load () {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      this.imageListenerKeys_ = [\n        listenOnce(this.image_, EventType.ERROR,\n          this.handleImageError_, this),\n        listenOnce(this.image_, EventType.LOAD,\n          this.handleImageLoad_, this)\n      ];\n      try {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n    }\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.replaceColor_ = function replaceColor_ () {\n    if (!this.color_ || this.isTainted_()) {\n      return;\n    }\n\n    this.canvas_.width = this.image_.width;\n    this.canvas_.height = this.image_.height;\n\n    var ctx = this.canvas_.getContext('2d');\n    ctx.drawImage(this.image_, 0, 0);\n\n    var imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);\n    var data = imgData.data;\n    var r = this.color_[0] / 255.0;\n    var g = this.color_[1] / 255.0;\n    var b = this.color_[2] / 255.0;\n\n    for (var i = 0, ii = data.length; i < ii; i += 4) {\n      data[i] *= r;\n      data[i + 1] *= g;\n      data[i + 2] *= b;\n    }\n    ctx.putImageData(imgData, 0, 0);\n  };\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  IconImage.prototype.unlistenImage_ = function unlistenImage_ () {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n\n  return IconImage;\n}(EventTarget));\n\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  var iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\n\n\nexport default IconImage;\n\n//# sourceMappingURL=IconImage.js.map","/**\n * @module ol/style/IconOrigin\n */\n\n/**\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n * @enum {string}\n */\nexport default {\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right'\n};\n\n//# sourceMappingURL=IconOrigin.js.map","/**\n * @module ol/style/Icon\n */\nimport {getUid} from '../util.js';\nimport ImageState from '../ImageState.js';\nimport {assert} from '../asserts.js';\nimport {asArray} from '../color.js';\nimport {listen, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport {get as getIconImage} from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /*@__PURE__*/(function (ImageStyle) {\n  function Icon(opt_options) {\n    var options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    ImageStyle.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ?\n      options.anchorOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ?\n      options.anchorXUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ?\n      options.anchorYUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    var imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n\n    assert(!(src !== undefined && image),\n      4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && imgSize),\n      5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0,\n      6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ?\n      ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image, /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ?\n      options.offsetOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n  }\n\n  if ( ImageStyle ) Icon.__proto__ = ImageStyle;\n  Icon.prototype = Object.create( ImageStyle && ImageStyle.prototype );\n  Icon.prototype.constructor = Icon;\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  Icon.prototype.clone = function clone () {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getAnchor = function getAnchor () {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    var anchor = this.anchor_;\n    var size = this.getSize();\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n        this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  };\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  Icon.prototype.setAnchor = function setAnchor (anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  Icon.prototype.getColor = function getColor () {\n    return this.color_;\n  };\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @override\n   * @api\n   */\n  Icon.prototype.getImage = function getImage (pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getImageSize = function getImageSize () {\n    return this.iconImage_.getSize();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {\n    return this.getImageSize();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getImageState = function getImageState () {\n    return this.iconImage_.getImageState();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getOrigin = function getOrigin () {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    var offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  };\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  Icon.prototype.getSrc = function getSrc () {\n    return this.iconImage_.getSrc();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getSize = function getSize () {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.listenImageChange = function listenImageChange (listener, thisArg) {\n    return listen(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  };\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @override\n   * @api\n   */\n  Icon.prototype.load = function load () {\n    this.iconImage_.load();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {\n    unlisten(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  };\n\n  return Icon;\n}(ImageStyle));\n\n\nexport default Icon;\n\n//# sourceMappingURL=Icon.js.map","/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\n\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement] Text placement.\n * @property {number} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = function Text(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.font_ = options.font;\n\n  /**\n  * @private\n  * @type {number|undefined}\n  */\n  this.rotation_ = options.rotation;\n\n  /**\n  * @private\n  * @type {boolean|undefined}\n  */\n  this.rotateWithView_ = options.rotateWithView;\n\n  /**\n  * @private\n  * @type {number|undefined}\n  */\n  this.scale_ = options.scale;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.text_ = options.text;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.textAlign_ = options.textAlign;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.textBaseline_ = options.textBaseline;\n\n  /**\n  * @private\n  * @type {import(\"./Fill.js\").default}\n  */\n  this.fill_ = options.fill !== undefined ? options.fill :\n    new Fill({color: DEFAULT_FILL_COLOR});\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n  /**\n  * @private\n  * @type {import(\"./TextPlacement.js\").default|string}\n  */\n  this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n\n  /**\n  * @private\n  * @type {boolean}\n  */\n  this.overflow_ = !!options.overflow;\n\n  /**\n  * @private\n  * @type {import(\"./Stroke.js\").default}\n  */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n  /**\n  * @private\n  * @type {import(\"./Fill.js\").default}\n  */\n  this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n  /**\n  * @private\n  * @type {import(\"./Stroke.js\").default}\n  */\n  this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n  /**\n  * @private\n  * @type {Array<number>}\n  */\n  this.padding_ = options.padding === undefined ? null : options.padding;\n};\n\n/**\n* Clones the style.\n* @return {Text} The cloned style.\n* @api\n*/\nText.prototype.clone = function clone () {\n  return new Text({\n    font: this.getFont(),\n    placement: this.getPlacement(),\n    maxAngle: this.getMaxAngle(),\n    overflow: this.getOverflow(),\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView(),\n    scale: this.getScale(),\n    text: this.getText(),\n    textAlign: this.getTextAlign(),\n    textBaseline: this.getTextBaseline(),\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    offsetX: this.getOffsetX(),\n    offsetY: this.getOffsetY(),\n    backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n    backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined\n  });\n};\n\n/**\n* Get the `overflow` configuration.\n* @return {boolean} Let text overflow the length of the path they follow.\n* @api\n*/\nText.prototype.getOverflow = function getOverflow () {\n  return this.overflow_;\n};\n\n/**\n* Get the font name.\n* @return {string|undefined} Font.\n* @api\n*/\nText.prototype.getFont = function getFont () {\n  return this.font_;\n};\n\n/**\n* Get the maximum angle between adjacent characters.\n* @return {number} Angle in radians.\n* @api\n*/\nText.prototype.getMaxAngle = function getMaxAngle () {\n  return this.maxAngle_;\n};\n\n/**\n* Get the label placement.\n* @return {import(\"./TextPlacement.js\").default|string} Text placement.\n* @api\n*/\nText.prototype.getPlacement = function getPlacement () {\n  return this.placement_;\n};\n\n/**\n* Get the x-offset for the text.\n* @return {number} Horizontal text offset.\n* @api\n*/\nText.prototype.getOffsetX = function getOffsetX () {\n  return this.offsetX_;\n};\n\n/**\n* Get the y-offset for the text.\n* @return {number} Vertical text offset.\n* @api\n*/\nText.prototype.getOffsetY = function getOffsetY () {\n  return this.offsetY_;\n};\n\n/**\n* Get the fill style for the text.\n* @return {import(\"./Fill.js\").default} Fill style.\n* @api\n*/\nText.prototype.getFill = function getFill () {\n  return this.fill_;\n};\n\n/**\n* Determine whether the text rotates with the map.\n* @return {boolean|undefined} Rotate with map.\n* @api\n*/\nText.prototype.getRotateWithView = function getRotateWithView () {\n  return this.rotateWithView_;\n};\n\n/**\n* Get the text rotation.\n* @return {number|undefined} Rotation.\n* @api\n*/\nText.prototype.getRotation = function getRotation () {\n  return this.rotation_;\n};\n\n/**\n* Get the text scale.\n* @return {number|undefined} Scale.\n* @api\n*/\nText.prototype.getScale = function getScale () {\n  return this.scale_;\n};\n\n/**\n* Get the stroke style for the text.\n* @return {import(\"./Stroke.js\").default} Stroke style.\n* @api\n*/\nText.prototype.getStroke = function getStroke () {\n  return this.stroke_;\n};\n\n/**\n* Get the text to be rendered.\n* @return {string|undefined} Text.\n* @api\n*/\nText.prototype.getText = function getText () {\n  return this.text_;\n};\n\n/**\n* Get the text alignment.\n* @return {string|undefined} Text align.\n* @api\n*/\nText.prototype.getTextAlign = function getTextAlign () {\n  return this.textAlign_;\n};\n\n/**\n* Get the text baseline.\n* @return {string|undefined} Text baseline.\n* @api\n*/\nText.prototype.getTextBaseline = function getTextBaseline () {\n  return this.textBaseline_;\n};\n\n/**\n* Get the background fill style for the text.\n* @return {import(\"./Fill.js\").default} Fill style.\n* @api\n*/\nText.prototype.getBackgroundFill = function getBackgroundFill () {\n  return this.backgroundFill_;\n};\n\n/**\n* Get the background stroke style for the text.\n* @return {import(\"./Stroke.js\").default} Stroke style.\n* @api\n*/\nText.prototype.getBackgroundStroke = function getBackgroundStroke () {\n  return this.backgroundStroke_;\n};\n\n/**\n* Get the padding for the text.\n* @return {Array<number>} Padding.\n* @api\n*/\nText.prototype.getPadding = function getPadding () {\n  return this.padding_;\n};\n\n/**\n* Set the `overflow` property.\n*\n* @param {boolean} overflow Let text overflow the path that it follows.\n* @api\n*/\nText.prototype.setOverflow = function setOverflow (overflow) {\n  this.overflow_ = overflow;\n};\n\n/**\n* Set the font.\n*\n* @param {string|undefined} font Font.\n* @api\n*/\nText.prototype.setFont = function setFont (font) {\n  this.font_ = font;\n};\n\n/**\n* Set the maximum angle between adjacent characters.\n*\n* @param {number} maxAngle Angle in radians.\n* @api\n*/\nText.prototype.setMaxAngle = function setMaxAngle (maxAngle) {\n  this.maxAngle_ = maxAngle;\n};\n\n/**\n* Set the x offset.\n*\n* @param {number} offsetX Horizontal text offset.\n* @api\n*/\nText.prototype.setOffsetX = function setOffsetX (offsetX) {\n  this.offsetX_ = offsetX;\n};\n\n/**\n* Set the y offset.\n*\n* @param {number} offsetY Vertical text offset.\n* @api\n*/\nText.prototype.setOffsetY = function setOffsetY (offsetY) {\n  this.offsetY_ = offsetY;\n};\n\n/**\n* Set the text placement.\n*\n* @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n* @api\n*/\nText.prototype.setPlacement = function setPlacement (placement) {\n  this.placement_ = placement;\n};\n\n/**\n* Set the fill.\n*\n* @param {import(\"./Fill.js\").default} fill Fill style.\n* @api\n*/\nText.prototype.setFill = function setFill (fill) {\n  this.fill_ = fill;\n};\n\n/**\n* Set the rotation.\n*\n* @param {number|undefined} rotation Rotation.\n* @api\n*/\nText.prototype.setRotation = function setRotation (rotation) {\n  this.rotation_ = rotation;\n};\n\n/**\n* Set the scale.\n*\n* @param {number|undefined} scale Scale.\n* @api\n*/\nText.prototype.setScale = function setScale (scale) {\n  this.scale_ = scale;\n};\n\n/**\n* Set the stroke.\n*\n* @param {import(\"./Stroke.js\").default} stroke Stroke style.\n* @api\n*/\nText.prototype.setStroke = function setStroke (stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n* Set the text.\n*\n* @param {string|undefined} text Text.\n* @api\n*/\nText.prototype.setText = function setText (text) {\n  this.text_ = text;\n};\n\n/**\n* Set the text alignment.\n*\n* @param {string|undefined} textAlign Text align.\n* @api\n*/\nText.prototype.setTextAlign = function setTextAlign (textAlign) {\n  this.textAlign_ = textAlign;\n};\n\n/**\n* Set the text baseline.\n*\n* @param {string|undefined} textBaseline Text baseline.\n* @api\n*/\nText.prototype.setTextBaseline = function setTextBaseline (textBaseline) {\n  this.textBaseline_ = textBaseline;\n};\n\n/**\n* Set the background fill.\n*\n* @param {import(\"./Fill.js\").default} fill Fill style.\n* @api\n*/\nText.prototype.setBackgroundFill = function setBackgroundFill (fill) {\n  this.backgroundFill_ = fill;\n};\n\n/**\n* Set the background stroke.\n*\n* @param {import(\"./Stroke.js\").default} stroke Stroke style.\n* @api\n*/\nText.prototype.setBackgroundStroke = function setBackgroundStroke (stroke) {\n  this.backgroundStroke_ = stroke;\n};\n\n/**\n* Set the padding (`[top, right, bottom, left]`).\n*\n* @param {!Array<number>} padding Padding.\n* @api\n*/\nText.prototype.setPadding = function setPadding (padding) {\n  this.padding_ = padding;\n};\n\nexport default Text;\n\n//# sourceMappingURL=Text.js.map"],"sourceRoot":""}